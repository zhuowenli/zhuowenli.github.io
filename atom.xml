<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhuo Wenli</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhuowenli.com/"/>
  <updated>2022-06-18T02:56:11.596Z</updated>
  <id>https://www.zhuowenli.com/</id>
  
  <author>
    <name>Zhuo Wenli</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What&#39;s new in ECMAScript 2020 (ES2020)</title>
    <link href="https://www.zhuowenli.com/backend/es2020.html"/>
    <id>https://www.zhuowenli.com/backend/es2020.html</id>
    <published>2020-07-07T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>从 ES2016 开始，ECMA 修改了标准的制定原则：成文标准要从事实标准中诞生，实现先于标准存在，进入标准草案必须有 JavaScript 引擎实现的支持、社区里有充分的人气和足够的 Test262 测试。</p><p>旨在通过更频繁地发布小规模增量更新，促进标准和语言的快速发展，而版本命令规则使用 ECMAScript + 年份的形式。</p><p>所以，我们今年又可以看看 ES2020 新增了哪些特性啦。✌️</p><a id="more"></a><h2 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import"></a>动态 import</h2><p>如果你有某个在代码中不常使用的资源，直接导入其所有依赖项可能只是浪费资源的话。我们就可以在需要时通过  <code>async/await</code> 动态导入该依赖项。</p><p>新的动态 <code>import</code> 语法看起来像一个函数，但并不是函数，不过动态 <code>import</code> 语法也支持 <code>await</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> doMathAdd = <span class="keyword">async</span> (num1, num2) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> math = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./math.js'</span>);</span><br><span class="line">    <span class="keyword">return</span> math.add(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line">doMathAdd(<span class="number">4</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>在这之前，我们通常会借助 <a href="https://webpack.js.org/api/module-methods/#requireensure" target="_blank" rel="noopener"><code>require.ensure()</code></a> 来实现该特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> doMathAdd = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">require</span>.ensure([<span class="string">'./math.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">'./math.js'</span>).default;</span><br><span class="line">            resolve(math.add(<span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">doMathAdd(<span class="number">4</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import</a></p><h2 id="私有-Class-变量"><a href="#私有-Class-变量" class="headerlink" title="私有 Class 变量"></a>私有 Class 变量</h2><p>Class 属性在默认情况下是公共的，可以被外部类检测或修改。现在你可以 <code>#</code> 前缀来定义私有类字段。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    #message = "Howdy";</span><br><span class="line">    greet() &#123;</span><br><span class="line">        console.log(this.#message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="keyword">new</span> Message();</span><br><span class="line"></span><br><span class="line">greeting.greet(); <span class="comment">// Howdy</span></span><br><span class="line">console.log(greeting.#message); // Private name #message is not defined</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields</a></p><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><p>该 <code>Promise.allSettled()</code> 方法返回一个在所有给定的 promise 已被决议或被拒绝后决议的 <code>Promise</code>，并带有一个对象数组 <code>[{status, ?value, ?reason}]</code> ，每个对象表示对应的 promise 结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="built_in">Promise</span>.reject(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.allSettled([p1, p2]).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//     Object &#123; status: "fulfilled", value: 1&#125;,</span></span><br><span class="line"><span class="comment">//     Object &#123; status: "rejected", reason: 2&#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data)); <span class="comment">// Uncaught (in promise) 2</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled</a></p><h2 id="空值合并运算符"><a href="#空值合并运算符" class="headerlink" title="空值合并运算符"></a>空值合并运算符</h2><p>大家都知道由于 JavaScript 是动态类型的，在进行某些比较操作的时候经常会发生一些「隐式强制转换」，导致我们最终获取到的结果跟我们的预期不一致。例如下面这种情况，我们期望有效值的内容可以被正常打印出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    profile: &#123;</span><br><span class="line">        name: <span class="string">''</span>,</span><br><span class="line">        age: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.profile.name || <span class="string">'Anonymous'</span>); <span class="comment">// Anonymous</span></span><br><span class="line"><span class="built_in">console</span>.log(person.profile.age || <span class="number">18</span>); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>如果我们希望该判断条件更加严格点的话，只有值为 <code>null</code> 或 <code>undefined</code> 时才允许使用默认值，就得改成这种操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = person.profile;</span><br><span class="line"><span class="built_in">console</span>.log(name !== <span class="literal">null</span> &amp;&amp; name !== <span class="literal">undefined</span> ? name : <span class="string">'Anonymous'</span>); <span class="comment">// ''</span></span><br><span class="line"><span class="built_in">console</span>.log(age !== <span class="literal">null</span> &amp;&amp; age !== <span class="literal">undefined</span> ? age : <span class="number">18</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>ES2020 引入了一个新的运算符 <code>??</code>，该运算符的工作原理与上述的条件一致，仅当初始值为 <code>null</code> 或 <code>undefined</code> 时才读取为运算符右边的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.profile.name ?? <span class="string">'Anonymous'</span>); <span class="comment">// ''</span></span><br><span class="line"><span class="built_in">console</span>.log(person.profile.age ?? <span class="number">18</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator</a></p><h2 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符"></a>可选链操作符</h2><p>与空值合并运算符相似，JavaScript 处理假值时可能无法按照我们的意愿行事。如果我们想要的值是不确定的，我们可以返回一个默认值。但是如果它的路径是不确定的，该怎么办？</p><p>可选链操作符 <code>?.</code> 可以按照操作符之前的属性是否有效，链式读取对象的属性或者使整个对象链返回 <code>undefined</code>。 <code>?.</code> 运算符的作用与 <code>.</code> 运算符类似，不同之处在于，如果对象链上的引用是 <code>nullish</code> (<code>null</code> 或者 <code>undefined</code>)，<code>.</code> 操作符会抛出一个错误，而 <code>?.</code> 操作符则会按照短路计算的方式进行处理，返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> adventurer = &#123;</span><br><span class="line">    name: <span class="string">'Alice'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(adventurer.dog?.name); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(adventurer.dog?.other?.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>可选链操作符也可用于函数调用，如果操作符前的函数不存在，也将会返回 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(adventurer.someNonExistentMethod?.()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>结合其他运算符一起使用，效果更佳：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person?.profile?.name ?? <span class="string">'Anonymous'</span>); <span class="comment">// Anonymous</span></span><br><span class="line"><span class="built_in">console</span>.log(person?.profile?.age || <span class="number">18</span>); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE</a></p><h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h2><p>BigInt 是一个内置的对象，它提供了一种方法来表示大于 <code>2⁵³-1</code> 的整数，这是 JavaScript 可以可靠地用 number 原语表示的最大数，并由 number 表示。<code>MAX_SAFE_INTEGER</code> 常量。BigInt 可用于任意大整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> max = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(max); <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure><p>超过此该值后，一切操作就开始变得有点奇怪…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(max + <span class="number">1</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="built_in">console</span>.log(max + <span class="number">2</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="built_in">console</span>.log(max + <span class="number">3</span>); <span class="comment">// 9007199254740994</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) == <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>现在我们可以使用新的 BigInt 数据类型解决此问题。通过在末尾加上字母 <code>n</code>，就可以创建一个 BigInt 类型的数据。我们无法将标准数字与 BigInt 数字混合使用，因此任何数学运算都需要使用BigInt 来完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigNum = <span class="number">100000000000000000000000000000n</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bigNum * <span class="number">2n</span>); <span class="comment">// 200000000000000000000000000000n</span></span><br><span class="line"><span class="built_in">console</span>.log(bigNum * bigNum); <span class="comment">// 10000000000000000000000000000000000000000000000000000000000n</span></span><br><span class="line"><span class="built_in">console</span>.log(bigNum * bigNum * <span class="number">2</span>); <span class="comment">// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions</span></span><br><span class="line"><span class="built_in">console</span>.log(bigNum * bigNum * <span class="number">2n</span>); <span class="comment">// 20000000000000000000000000000000000000000000000000000000000n</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt</a></p><h2 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h2><p>在 JavaScript 中，编写可跨平台的访问全局对象的代码特别麻烦。在浏览器环境下，我们会通过 <code>window</code>、<code>self</code>、<code>this</code>、<code>frames</code> 等各种方式来访问；在 Node 环境下，我们又会通过 <code>global</code> 或者 <code>this</code> 来访问；其中，只有 V8 的 <code>d8</code> 或者 JavaScriptCore 的 <code>jsc</code> 之类的 shell 中才会提供访问全局对象的功能。</p><p>在松散模式下，可以在函数中返回 <code>this</code> 来获取全局对象，但是在严格模式和模块环境下，<code>this</code> 会返回 <code>undefined</code>。获取环境全局对象的唯一可靠的跨平台方法是 <code>Function(&#39;return this&#39;)()</code>。但是这在某些情况下会违反 <a href="https://github.com/paulmillr/es6-shim/issues/301" target="_blank" rel="noopener">CSP</a> 规则（例如在 Chrome Apps中），因此 <a href="https://github.com/paulmillr/es6-shim/commit/2367e0953edd01ae9a5628e1f47cf14b0377a7d6" target="_blank" rel="noopener">es6-shim</a> 使用了类似如下的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getGlobal = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// the only reliable means to get the global object is</span></span><br><span class="line">    <span class="comment">// `Function('return this')()`</span></span><br><span class="line">    <span class="comment">// However, this causes CSP violations in Chrome apps.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> self; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> <span class="built_in">window</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> global !== <span class="string">'undefined'</span>) &#123; <span class="keyword">return</span> global; &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unable to locate global object'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> globals = getGlobal();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> globals.foo !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// no foo in this environment!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>globalThis</code> 提供了一个标准的方式来获取不同环境下的全局 <code>this</code> 对象（也就是全局对象自身）。不像 <code>window</code> 或者 <code>self</code> 这些属性，它确保可以在有无窗口的各种环境下正常工作。所以，你可以安心的使用 <code>globalThis</code>，不必担心它的运行环境。为便于记忆，你只需要记住，全局作用域中的 <code>this</code> 就是 <code>globalThis</code>。有了这个功能，就不再需要在整个环境中进行全局搜索了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> globalThis.foo !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// no foo in this environment!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/globalThis</a></p><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><p><a href="https://github.com/tc39/proposals/blob/master/finished-proposals.md" target="_blank" rel="noopener">https://github.com/tc39/proposals/blob/master/finished-proposals.md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从 ES2016 开始，ECMA 修改了标准的制定原则：成文标准要从事实标准中诞生，实现先于标准存在，进入标准草案必须有 JavaScript 引擎实现的支持、社区里有充分的人气和足够的 Test262 测试。&lt;/p&gt;
&lt;p&gt;旨在通过更频繁地发布小规模增量更新，促进标准和语言的快速发展，而版本命令规则使用 ECMAScript + 年份的形式。&lt;/p&gt;
&lt;p&gt;所以，我们今年又可以看看 ES2020 新增了哪些特性啦。✌️&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://www.zhuowenli.com/categories/backend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="ECMAScript" scheme="https://www.zhuowenli.com/tags/ECMAScript/"/>
    
      <category term="ES2020" scheme="https://www.zhuowenli.com/tags/ES2020/"/>
    
  </entry>
  
  <entry>
    <title>你真的了解 REST 吗？</title>
    <link href="https://www.zhuowenli.com/backend/rest.html"/>
    <id>https://www.zhuowenli.com/backend/rest.html</id>
    <published>2020-07-01T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>在互联网迅猛发展的今天，作为一名前端开发，大家应该都会经常听到 REST 这个东西。并且随着前后端分离以及各种层出不穷的框架技术的发展，REST 已经普遍到成为了互联网软件开发者的基本常识。然而，在大部分时候，其实大家都没理解到底什么是 REST。</p><p>我最早查阅 REST 资料的时候还是在 15 年刚接触前端开发的那些时候，就粗略的看了一下，觉得没必要花时间看这么简单的东西。对于不理解 REST 的开发来说，大家习惯于展示一些 demo 来让他人理解 REST，这样就给大家造成了 REST 就是 CURD 谬论。所以开发同学想要深入理解 REST 是什么，就很难避开 Fielding 的那篇博士论文。然而，当我最近重新去看时论文的时候却颇感吃力。</p><p>在当面试官的过程中，我也经常会问一些前端同学：「你知道什么是 REST 吗？」。大家的回答也是五花八门，很少有能够听到让我满意的回答。甚至有的同学说「没有听说过 REST」！</p><p>那么 REST 究竟是什么？RESTful API 跟 REST 有什么区别？是一种技术、一种架构、还是一种规范？</p><p>对于这个问题笔者先卖个关子，为了深入理解 REST 是什么，我们需要回顾一下 Web 发展的历程，从源头上讲讲 REST 是怎么来的。</p><a id="more"></a><h2 id="Web-技术发展与-REST-的由来"><a href="#Web-技术发展与-REST-的由来" class="headerlink" title="Web 技术发展与 REST 的由来"></a>Web 技术发展与 REST 的由来</h2><p>在互联网行业中，实践总是走在理论之前。Web 发展到了 1995 年，在 CGI、ASP 等技术出现之后，沿用了多年、主要面向静态文档的 HTTP/1.0 协议已经无法满足 Web 应用的开发需求，因此需要设计新版本的 HTTP 协议。</p><p>在 HTTP/1.0 协议专家组之中，有一位年轻人脱颖而出，显示出了不凡的洞察力，后来他成为了 HTTP/1.1 协议专家组的负责人。这位年轻人就是 Apache HTTP 服务器的核心开发者 <a href="https://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="noopener">Roy Fielding</a> ，他还是 Apache 软件基金会的合作创始人。</p><p>Fielding 和他的同事们在 HTTP/1.1 协议的设计工作中，对于 Web 之所以取得巨大成功，在技术架构方面的因素做了一番深入的总结。Fielding 将这些总结纳入到了一套理论框架之中，然后使用这套理论框架中的指导原则，来指导 HTTP/1.1 协议的设计方向。</p><p>HTTP/1.1 协议的第一个草稿是在 1996 年 1 月发布的，经过了三年多时间的修订，于 1999 年 6 月成为了 IETF 的正式规范（包括了 RFC 2616 以及用于对客户端做身份认证的 RFC 2617）。HTTP/1.1 协议设计得极为成功，以至于发布之后整整 10 年时间里，都没有多少人认为有修订的必要。</p><p>Fielding 在完成 HTTP/1.1 协议的设计工作之后，回到了加州大学欧文分校继续攻读自己的博士学位。第二年（2000 年）在他的博士学位论文 <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">Architectural Styles and the Design of Network-based Software Architectures</a> 中，更为系统、严谨地阐述了这套理论框架，并且使用这套理论框架推导出了一种新的架构风格。Fielding 为这种架构风格取了一个令人轻松愉快的名字「REST」—— Representational State Transfer（表述性状态转移）的缩写。</p><p>在我看来，Fielding 这篇博士论文在 Web 发展史上的价值，不亚于 Web 之父 <a href="https://www.w3.org/People/Berners-Lee/" target="_blank" rel="noopener">Tim Berners-Lee</a> 关于超文本的那篇<a href="https://www.w3.org/History/1989/proposal.html" target="_blank" rel="noopener">经典论文</a>。然而遗憾的是，这篇博士论文在诞生之后的将近 5 年时间里，一直没有得到足够的重视。</p><p>这种情况在 2005 年之后有了很大的改善，随着 Ajax、Ruby on Rails 等新的 Web 开发技术的兴起，在 Web 开发技术社区掀起了一场重归 Web 架构设计本源的运动，REST 架构风格得到了越来越多的关注。在 2007 年 1 月，支持 REST 开发的 Ruby on Rails 1.2 版正式发布，并且将支持 REST 开发作为 Rails 未来发展中的优先内容。Ruby on Rails 的创始人 <a href="https://en.wikipedia.org/wiki/David_Heinemeier_Hansson" target="_blank" rel="noopener">DHH</a> 做了一个名为「World of Resources」的精彩演讲，DHH 在 Web 开发技术社区中的强大影响力，使得 REST 一下子处在 Web 开发技术舞台的聚光灯之下。</p><p>今天，各种流行的 Web 开发框架，几乎没有不支持 REST 开发的。大多数 Web 开发者都是通过阅读某种 REST 开发框架的文档，以及通过一些 demo 来学习 REST 开发的。然而，通过 demo 来学习 REST 有非常大的局限性。因为 REST 并不是一种具体的技术，也不是一种具体的规范，REST 其实是一种内涵非常丰富的架构风格。通过 demo 来学习 REST，除了学习到一种有趣的 Web 开发技术之外，并不能全面深入的理解 REST 究竟是什么。甚至还会误以为这些简单的 demo 就是 REST 本身，REST 不过是一种简单的 Web 开发技术而已。</p><p>那么，下面我们言归正传。</p><h2 id="深入理解-REST"><a href="#深入理解-REST" class="headerlink" title="深入理解 REST"></a>深入理解 REST</h2><p>在 Fielding 的这篇名为 <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">Architectural Styles and the Design of Network-based Software Architectures</a> 的博士论文（中文版名为<a href="https://www.infoq.cn/article/dissertation-rest-cn/" target="_blank" rel="noopener">《架构风格与基于网络的软件架构设计》</a>）中，提出了一整套基于网络的软件（即所谓的「分布式应用」）的设计方法，值得所有分布式应用的开发者仔细阅读、深入体会。</p><p>在论文的前三章中，Fielding 在批判性继承前人研究成果的基础上，建立起来一整套研究和评价软件架构的方法论。这套方法论的核心是「架构风格」这个概念。架构风格是一种研究和评价软件架构设计的方法，它是比架构更加抽象的概念。一种架构风格是由一组相互协作的架构约束来定义的。架构约束是指软件的运行环境施加在架构设计之上的约束。</p><blockquote><p>REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles. Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.<br>REST 强调组件交互的可伸缩性、接口的通用性、组件的独立部署、以及用来减少交互延迟、增强安全性、封装遗留系统的中间组件。我描述了指导 REST 的软件工程原则和选择用来支持这些原则的交互约束，并将它们与其他架构风格的约束进行了对比。最后，我描述了从在超文本转移协议（HTTP）和统一资源标识符（URI）的标准中应用 REST，以及从这两个标准在 Web 客户端和服务器软件的后续部署等过程中学到的经验教训。</p></blockquote><p>这是论文摘要里面的一段话，从这里就能看出来，我们平时大部分时候所理解的 REST 都是错误的。REST 不是一个接口规范，不是对资源的 CRUD，而是网络应用的一种架构风格。另外，作者提到在论文里描述了将 REST 应用到 HTTP 以及 URI 规范的过程中所吸取的经验，我把这一句话加粗了，是为了强调 REST 的重要性，也是为了强调这篇论文的价值。</p><p>作者在论文里介绍了什么是软件架构：</p><blockquote><p>A <strong>software architecture</strong> is an abstraction of the run-time elements of a software system during some phase of its operation. A system may be composed of many levels of abstraction and many phases of operation, each with its own software architecture.<br>一个<strong>软件架构</strong>是一个软件系统在其操作的某个阶段的运行时（run-time）元素的抽象。一个系统可能由很多层抽象和很多个操作阶段组成，每个抽象和操作阶段都有自己的软件架构。</p></blockquote><p>架构的组成元素：</p><blockquote><p>A <strong>software architecture</strong> is defined by a configuration of architectural elements–components, connectors, and data–constrained in their relationships in order to achieve a desired set of architectural properties.<br>一个<strong>软件架构</strong>由一些架构元素（组件、连接器和数据）的配置来定义，这些元素之间的关系受到约束，以获得想要得到的一组架构属性。</p><ol><li>A <em>component</em> is an abstract unit of software instructions and internal state that provides a transformation of data via its interface.<br>一个<strong>组件</strong>是软件指令和内部状态的一个抽象单元，通过其接口提供对于数据的转换。</li><li>A <em>connector</em> is an abstract mechanism that mediates communication, coordination, or cooperation among components.<br>一个<strong>连接器</strong>是对于组件之间的通讯、协调或者合作进行仲裁的一种抽象机制。</li><li>A <em>datum</em> is an element of information that is transferred from a component, or received by a component, via a connector.<br>一个<strong>数据</strong>是组件通过一个连接器接收或发送的信息元素。</li></ol></blockquote><p>结构：</p><blockquote><p>A <strong>configuration</strong> is the structure of architectural relationships among components, connectors, and data during a period of system run-time.<br>一个<strong>配置</strong>是在系统的运行期间组件、连接器和数据之间的架构关系的结构。</p></blockquote><p>属性：</p><blockquote><p>The set of architectural properties of a software architecture includes all properties that derive from the selection and arrangement of components, connectors, and data within the system. Examples include both the functional properties achieved by the system and non-functional properties, such as relative ease of evolution, reusability of components, efficiency, and dynamic extensibility, often referred to as quality attributes.<br>软件架构的架构属性集合包括了对组件、连接器和数据的选择和排列所导致的所有属性。架构属性的例子包括了可以由系统获得的功能属性和非功能属性，例如：进化的相对容易程度、组件的可重用性、效率、动态扩展能力；这些常常被称作品质属性（quality attributes）。</p></blockquote><p>风格：</p><blockquote><p>An <strong>architectural style</strong> is a coordinated set of architectural constraints that restricts the roles/features of architectural elements and the allowed relationships among those elements within any architecture that conforms to that style.<br>一种<strong>架构风格</strong>是一组协作的架构约束，这些约束限制了架构元素的角色和功能，以及在任何一个遵循该风格的架构中允许存在的元素之间的关系。</p></blockquote><p>然后介绍了一下什么是 Network-based Application Architectures，以及需要关注的架构属性：</p><ol><li>性能（Performance）</li><li>可伸缩性（Scalability）</li><li>简单性（Simplicity）</li><li>可修改性（Modifiability）</li><li>可见性（Visibility）</li><li>可移植性（Portability）</li><li>可靠性（Reliability）</li></ol><p>在论文的第四章中，Fielding 研究了 Web 这样一个分布式系统对于软件架构设计提出了哪些需求。在第五章中，Fielding 将第四章 Web 提出的需求具体化为一些架构约束，通过逐步添加各种架构约束，推导出来了 REST 这种新的架构风格。</p><p>REST 架构风格的推导过程如下图所示：</p><p><img src="../assets/restful/1.png" alt="图 1：REST 所继承的架构风格约束"></p><p>在图 1 中，每一个椭圆形里面的缩写词代表了一种架构风格，而每一个箭头边的单词代表了一种架构约束。</p><p>REST 架构风格最重要的架构约束有 6 个：</p><ol><li>客户 - 服务器（Client-Server）: 通信只能由客户端单方面发起，表现为请求 - 响应的形式。</li><li>无状态（Stateless）: 通信的会话状态（Session State）应该全部由客户端负责维护。</li><li>缓存（Cache）: 响应内容可以在通信链的某处被缓存，以改善网络效率。</li><li>统一接口（Uniform Interface）: 通信链的组件之间通过统一的接口相互通信，以提高交互的可见性。</li><li>分层系统（Layered System）: 通过限制组件的行为（即，每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。</li><li>按需代码（Code-On-Demand，可选）: 支持通过下载并执行一些代码（例如 Java Applet、Flash 或 JavaScript），对客户端的功能进行扩展。</li></ol><p>只要满足这 6 条基本原则，就是符合 REST 风格的架构，这其中的每一条都值得花大精力去研究，等未来有空我也会一条条的深入去探索一下，探索一下技术的发展以及发展过程中的故事。</p><p>REST 架构风格如下图：</p><p><img src="../assets/restful/2.png" alt="图 2：REST 架构风格"></p><p>而 HTTP/1.1 协议作为一种 REST 架构风格的架构实例，其架构如下图所示：</p><p><img src="../assets/restful/3.png" alt="图 3：一个基于 REST 的架构的过程视图"></p><p>通过比较图 2 和图 3，大家不难发现这两张图中的架构是高度一致的。对于 HTTP/1.1 协议为何要设计成这个样子，大家想必已经有所领悟。</p><p>在论文的第六章中，Fielding 对于到 2000 年为止在 Web 基础架构协议的设计和开发方面的一些经验教训进行了深入的分析。其中，「HTTP 不是 RPC」、「HTTP 不是一种传输协议」两部分值得读者反复阅读。时至 20 年之后的今天，对于 HTTP 协议的误解仍然广泛存在。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>上述这些关于「REST 是什么」的描述，可以总结为一句话：REST 是所有 Web 应用都应该遵守的架构设计指导原则，而基于 REST 架构风格构建的 API 就是 RESTful API。</p><p>当然，REST 并不是法律，违反了 REST 的指导原则，仍然能够实现正常的功能开发。但是违反了 REST 的指导原则，会付出很多代价，特别是对于大流量的网站而言。它的大原则容易把握，但是细节不容易做对。我们需要进行较多的尝试来实施 RESTful API 中的最佳实践。大多数情况下，懒惰或缺乏时间意味着我们不会为此付出努力，所以才会为我们的用户留下一个个古怪的、难用的、却又脆弱的 API。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.infoq.cn/article/dissertation-rest-cn/" target="_blank" rel="noopener">《架构风格与基于网络的软件架构设计》</a></li><li><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="noopener">Architectural Styles and the Design of Network-based Software Architectures</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在互联网迅猛发展的今天，作为一名前端开发，大家应该都会经常听到 REST 这个东西。并且随着前后端分离以及各种层出不穷的框架技术的发展，REST 已经普遍到成为了互联网软件开发者的基本常识。然而，在大部分时候，其实大家都没理解到底什么是 REST。&lt;/p&gt;
&lt;p&gt;我最早查阅 REST 资料的时候还是在 15 年刚接触前端开发的那些时候，就粗略的看了一下，觉得没必要花时间看这么简单的东西。对于不理解 REST 的开发来说，大家习惯于展示一些 demo 来让他人理解 REST，这样就给大家造成了 REST 就是 CURD 谬论。所以开发同学想要深入理解 REST 是什么，就很难避开 Fielding 的那篇博士论文。然而，当我最近重新去看时论文的时候却颇感吃力。&lt;/p&gt;
&lt;p&gt;在当面试官的过程中，我也经常会问一些前端同学：「你知道什么是 REST 吗？」。大家的回答也是五花八门，很少有能够听到让我满意的回答。甚至有的同学说「没有听说过 REST」！&lt;/p&gt;
&lt;p&gt;那么 REST 究竟是什么？RESTful API 跟 REST 有什么区别？是一种技术、一种架构、还是一种规范？&lt;/p&gt;
&lt;p&gt;对于这个问题笔者先卖个关子，为了深入理解 REST 是什么，我们需要回顾一下 Web 发展的历程，从源头上讲讲 REST 是怎么来的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="backend" scheme="https://www.zhuowenli.com/categories/backend/"/>
    
    
      <category term="REST" scheme="https://www.zhuowenli.com/tags/REST/"/>
    
      <category term="plugin" scheme="https://www.zhuowenli.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>Awesome Mac</title>
    <link href="https://www.zhuowenli.com/diary/awesome-mac.html"/>
    <id>https://www.zhuowenli.com/diary/awesome-mac.html</id>
    <published>2020-06-16T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.592Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个入坑比较久的「资深」 Mac 用户？🤔️我经常会去探索一些可以提升我开发效率的软件，我需要它们帮助我进行快乐、高效的工作，同时也分享给你。</p><a id="more"></a><ul><li>✅ 开源免费项目</li><li>🍎 AppStore 可安装</li><li>🍺 Homebrew 可安装</li><li>👍 强烈推荐</li><li>💰 付费软件</li></ul><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><table><thead><tr><th>软件</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a></td><td>macOS 下最优秀的终端</td><td>✅ 👍</td></tr><tr><td><a href="https://www.renfei.org/snippets-lab/" target="_blank" rel="noopener">SnippetsLab</a></td><td>markdown 写作工具（数据存储在 icloud 上，支持登录 GitHub）</td><td>🍎 💰$9.99</td></tr><tr><td><a href="https://apps.apple.com/us/app/microsoft-to-do/id1274495053?mt=12" target="_blank" rel="noopener">Microsoft To Do</a></td><td>跨端 todo list（支持同步安卓、iOS、Windows、macOS）</td><td>🍎</td></tr><tr><td><a href="https://apps.apple.com/us/app/spark-email-app-by-readdle/id1176895641?mt=12" target="_blank" rel="noopener">Spark</a></td><td>可以登录多个账号的邮件客户端，很好用</td><td>🍎 👍</td></tr><tr><td><a href="https://github.com/Trojan-Qt5/Trojan-Qt5" target="_blank" rel="noopener">trojan-qt5</a></td><td>trojan 代理客户端</td><td>✅</td></tr><tr><td><a href="https://www.proxifier.com/" target="_blank" rel="noopener">Proxifier</a></td><td>Proxifier 支持代理<strong>所有</strong>应用程序，包括终端！</td><td>👍 💰$39.95</td></tr><tr><td><a href="https://apps.apple.com/us/app/microsoft-remote-desktop/id1295203466?mt=12" target="_blank" rel="noopener">Microsoft Remote Desktop</a></td><td>用于远程登录 Windows 系统</td><td>🍎</td></tr><tr><td><a href="https://github.com/oldj/SwitchHosts" target="_blank" rel="noopener">SwitchHosts!</a></td><td>管理 Hosts 的客户端工具</td><td>✅</td></tr><tr><td><a href="https://github.com/pilotmoon/Scroll-Reverser" target="_blank" rel="noopener">Scroll Reverser</a></td><td>设置鼠标、触摸板滚动方向，外接鼠标必备。</td><td>✅ 👍</td></tr><tr><td><a href="https://apps.apple.com/us/app/best-trace/id1037779758?mt=12" target="_blank" rel="noopener">BestTrace</a></td><td>很好用的 Traceroute 工具，可以地图展示数据包地址</td><td>🍎</td></tr><tr><td><a href="http://nukesaq88.github.io/Pngyu/" target="_blank" rel="noopener">Pngyu</a></td><td>png 图片压缩工具</td><td>✅</td></tr><tr><td><a href="https://freemacsoft.net/appcleaner/" target="_blank" rel="noopener">AppCleaner</a></td><td>用于彻底卸载不需要的app</td><td></td></tr><tr><td><a href="https://apps.apple.com/us/app/magnet/id441258766?mt=12" target="_blank" rel="noopener">Window Tidy</a></td><td>一款很好用的桌面窗口管理软件</td><td>🍎 💰$2.99</td></tr><tr><td><a href="https://apps.apple.com/us/app/magnet/id441258766?mt=12" target="_blank" rel="noopener">Magnet</a></td><td>一款很好用的桌面窗口管理软件，功能比 Window Tidy 强大点</td><td>🍎 💰$2.99</td></tr><tr><td><a href="https://www.keyboardmaestro.com/main/" target="_blank" rel="noopener">Keyboard Maestro</a></td><td>一款强大的自动化处理软件，我主要用来自定义所有软件的快捷键</td><td>💰$36</td></tr><tr><td><a href="https://gifox.io/" target="_blank" rel="noopener">Gifox</a></td><td>一款很好用 GIF 录屏软件</td><td>💰$14.99</td></tr></tbody></table><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><table><thead><tr><th>工具</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://github.com/Homebrew/brew" target="_blank" rel="noopener">brew</a></td><td>macOS 下的包管理器，必装！</td><td>✅ 👍</td></tr><tr><td><a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">ohmyzsh</a></td><td>一个非常强大的 zsh 扩展，提供了上百种主题和 200 多个插件，一定要装！</td><td>✅ 👍</td></tr><tr><td><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a></td><td>可以快速 cd 到你曾经访问过的目录</td><td>✅ 🍺 👍</td></tr><tr><td><a href="https://github.com/soimort/translate-shell" target="_blank" rel="noopener">translate-shell</a></td><td>命令行翻译工具，支持 Google、Bing、Yandex 等翻译</td><td>✅</td></tr><tr><td><a href="https://github.com/nvbn/thefuck" target="_blank" rel="noopener">thefuck</a></td><td>可以快速纠正你输入的命令</td><td>✅ 🍺</td></tr><tr><td><a href="https://github.com/faressoft/terminalizer" target="_blank" rel="noopener">Terminalizer</a></td><td>终端 GIF 录屏工具</td><td>✅ 🍺</td></tr><tr><td><a href="https://github.com/kdabir/has" target="_blank" rel="noopener">has</a></td><td>在 PATH 中检查命令行工具是否存在，并返回版本号</td><td>✅ 🍺</td></tr></tbody></table><!-- | [acme.sh](https://github.com/acmesh-official/acme.sh) | A pure Unix shell script implementing ACME client protocol | | --><h2 id="VSCode-插件"><a href="#VSCode-插件" class="headerlink" title="VSCode 插件"></a>VSCode 插件</h2><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=JerryHong.autofilename" target="_blank" rel="noopener">AutoFileName</a>: auto complete file name</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install AutoFileName</span><br></pre></td></tr></table></figure><p>  <img src="https://trello-attachments.s3.amazonaws.com/56c86fd76bf599f4fa62ee7f/1152x720/4b439177b0fb1c04af133aa733ba2a09/Untitled.gif" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight" target="_blank" rel="noopener">Color Highlight</a>: This extension styles css/web colors found in your document.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install color-highlight</span><br></pre></td></tr></table></figure></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=mrmlnc.vscode-csscomb" target="_blank" rel="noopener">CSScomb</a>: Coding style formatter for CSS, Less, SCSS or Sass</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install CSScomb</span><br></pre></td></tr></table></figure></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="noopener">Document This</a>: Automatically generates detailed JSDoc comments in TypeScript and JavaScript files.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install Document This</span><br></pre></td></tr></table></figure><p>  <img src="https://raw.githubusercontent.com/joelday/vscode-docthis/master/images/demo.gif" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=waderyan.gitblame" target="_blank" rel="noopener">Git Blame</a>: See git blame information in the status bar.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install GitBlame</span><br></pre></td></tr></table></figure><p>  <img src="https://raw.githubusercontent.com/Sertion/vscode-gitblame/master/images/GitBlamePreview.gif" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview" target="_blank" rel="noopener">Image preview</a>: Shows image preview in the gutter and on hover</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install image preview</span><br></pre></td></tr></table></figure><p>  <img src="https://raw.githubusercontent.com/kisstkondoros/gutter-preview/master/images/sample.png" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced" target="_blank" rel="noopener"></a>: Markdown Preview Enhanced ported to vscode</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install Markdown Preview</span><br></pre></td></tr></table></figure><p>  <img src="https://user-images.githubusercontent.com/1908863/28495106-30b3b15e-6f09-11e7-8eb6-ca4ca001ab15.png" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode" target="_blank" rel="noopener">Polacode</a>: 📸 Polaroid for your code</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install Polacode</span><br></pre></td></tr></table></figure><p>  <img src="https://github.com/octref/polacode/raw/master/demo/usage.gif" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=psioniq.psi-header" target="_blank" rel="noopener">psioniq File Header</a>: Configurable file header comment block and changes tracking.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install psi-header</span><br></pre></td></tr></table></figure></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a>: Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install sync</span><br></pre></td></tr></table></figure><p>  <img src="https://shanalikhan.github.io/img/login-with-github.png" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=liximomo.sftp" target="_blank" rel="noopener">SFTP</a>: Very powerful, with smart features. Very simple, requires just three lines of config! Very fast, finished in a blink.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install sftp</span><br></pre></td></tr></table></figure></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight" target="_blank" rel="noopener">TODO Highlight</a>: Highlight TODO, FIXME and other annotations within your code.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install todo highlight</span><br></pre></td></tr></table></figure><p>  <img src="https://github.com/wayou/vscode-todo-highlight/raw/master/assets/material-night.png" alt="demo"></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode" target="_blank" rel="noopener">Visual Studio IntelliCode</a>: AI-assisted development</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext install IntelliCode</span><br></pre></td></tr></table></figure><p>  <img src="https://go.microsoft.com/fwlink/?linkid=2006041" alt="demo"></p></li></ul><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><table><thead><tr><th>插件</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://chrome.google.com/webstore/detail/%E7%AE%80%E5%8D%95-qr-%E7%94%9F%E6%88%90%E5%99%A8/ajaomcmkalmeeahjfdklkcjbljhbokjl" target="_blank" rel="noopener">简单 QR 生成器</a></td><td>根据当前页面的 URL 生成 QR 码</td><td></td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/%E7%AE%80%E5%8D%95-qr-%E7%94%9F%E6%88%90%E5%99%A8/ajaomcmkalmeeahjfdklkcjbljhbokjl" target="_blank" rel="noopener">Tampermonkey</a></td><td>Tampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器。</td><td></td></tr><tr><td><a href="https://github.com/zhuowenli/githuber" target="_blank" rel="noopener">Githuber</a></td><td>这是一个帮助 GitHub 开发者每日发现优质内容的 Chrome 主页拓展。</td><td>✅</td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm" target="_blank" rel="noopener">Search by Image (by Google)</a></td><td>This extension allows you to initiate a Google search using any image on the web. By the Google Images team.</td><td></td></tr><tr><td><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener">Vue.js devtools</a></td><td>⚙️ Browser devtools extension for debugging Vue.js applications.</td><td>✅</td></tr></tbody></table><!-- | [京价保](https://github.com/sunoj/jjb) | 一个帮助你自动申请京东价格保护的chrome拓展 [jjb.im](https://jjb.im) | ✅ | -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个入坑比较久的「资深」 Mac 用户？🤔️我经常会去探索一些可以提升我开发效率的软件，我需要它们帮助我进行快乐、高效的工作，同时也分享给你。&lt;/p&gt;
    
    </summary>
    
    
      <category term="diary" scheme="https://www.zhuowenli.com/categories/diary/"/>
    
    
      <category term="macOS" scheme="https://www.zhuowenli.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript：如何优雅的调用通过 $refs 获取的子组件实例的方法？</title>
    <link href="https://www.zhuowenli.com/frontend/typescript-vue-refs.html"/>
    <id>https://www.zhuowenli.com/frontend/typescript-vue-refs.html</id>
    <published>2020-05-18T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 Vue 结合 TypeScript 的过程中，遇到了个问题，以至于困扰了我一段时间：通过 <code>this.$refs.child</code> 获取到 Vue 的子组件的实例后，访问子组件的实例方法会提示该方法不存在。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Vue, Component, Ref &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ParentComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Ref</span>() readonly dialog!: DialogComponent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> show() &#123;</span><br><span class="line">        <span class="keyword">this</span>.dialog.show(); <span class="comment">// &lt;- Error: TS2339: Property 'show' does not exist on type 'Vue'.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>好吧，大家很容易发现这个问题是 <code>shims-vue.d.ts</code> 这个声明文件的锅，他会使所有 <code>*.vue</code> 文件导出为 <code>Vue</code> 类型。</p><p>该文件的内容为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.vue' &#123;</span><br><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，我想了几个办法可以来绕过这个问题：</p><ol><li><p>使用 <code>// @ts-ignore</code>，在 VSCode 中，可以保留正常的定义跳转功能</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ParentComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Ref</span>() readonly dialog!: DialogComponent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> show() &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">this</span>.dialog.show(); <span class="comment">// no error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将其设置为 <code>any</code> 类型，不过会破坏定义跳转</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ParentComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Ref</span>() readonly dialog!: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> show() &#123;</span><br><span class="line">        <span class="keyword">this</span>.dialog.show(); <span class="comment">// no error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为组件类创建一个接口类型，并将 <code>Ref</code> 设置为该接口类型，这样也可以保留正常的定义跳转功能</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/types/index.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> DialogComponentInterface &#123;</span><br><span class="line">    show: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Child component</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> DialogComponent <span class="keyword">extends</span> Vue <span class="keyword">implements</span> DialogComponentInterface &#123;</span><br><span class="line">    <span class="keyword">public</span> show() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> DialogComponent <span class="keyword">from</span> <span class="string">'@/components/comment-form.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DialogComponentInterface &#125; <span class="keyword">from</span> <span class="string">'@/components/types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    components: &#123; DialogComponent &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ParentComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Ref</span>() readonly dialog!: DialogComponent &amp; DialogComponentInterface; <span class="comment">// 可以保留跳转定义功能</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> show() &#123;</span><br><span class="line">        <span class="keyword">this</span>.dialog.show(); <span class="comment">// no error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>合并类型。与方案 3 相比，它的代码更少，但是它还是会破坏定义跳转</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> ParentComponent <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">    <span class="meta">@Ref</span>() readonly dialog!: DialogComponent &amp; &#123; show: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> show() &#123;</span><br><span class="line">        <span class="keyword">this</span>.dialog.show(); <span class="comment">// no error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>最终我选择了方案 3 并用来解决该问题。因为这是由于 <code>shims-vue.d.ts</code> 的声明引起的问题，目前也没有想到其他比较好的解决方法。过段时间准备把项目升级到 Vue3.0，看看能不能从根本上解决这个问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用 Vue 结合 TypeScript 的过程中，遇到了个问题，以至于困扰了我一段时间：通过 &lt;code&gt;this.$refs.child&lt;/code&gt; 获取到 Vue 的子组件的实例后，访问子组件的实例方法会提示该方法不存在。&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; Vue, Component, Ref &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vue-property-decorator&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; ParentComponent &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; Vue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Ref&lt;/span&gt;() readonly dialog!: DialogComponent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; show() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.dialog.show(); &lt;span class=&quot;comment&quot;&gt;// &amp;lt;- Error: TS2339: Property &#39;show&#39; does not exist on type &#39;Vue&#39;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="typescript" scheme="https://www.zhuowenli.com/tags/typescript/"/>
    
      <category term="vue" scheme="https://www.zhuowenli.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>2015 =&gt; 2016</title>
    <link href="https://www.zhuowenli.com/diary/2016.html"/>
    <id>https://www.zhuowenli.com/diary/2016.html</id>
    <published>2016-01-07T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.592Z</updated>
    
    <content type="html"><![CDATA[<p>又到了一年一度的年终总结辣，去年也是差不多这个时候发表了一篇<a href="/diary/2015.html">《回首2014，规划2015》</a>，今年按例写一篇年终总结。聊以此文，纪念逝去的青葱…</p><a id="more"></a><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>去年一年，回顾了下才发现仅仅发布了30篇不到的文章。还没有14年刚开始创建博客的时候多，可能是工作比较忙，也可能就是变懒了。有些东西总是要记录下来的，忘掉就可惜啦。</p><p>今年发生的比较意义重大的，就是对网站进行了两次改版：</p><ul><li><strong>年初</strong> 更新了个人网站的第二个版式。并且把博客从SAE（新浪云）迁移到了github上。从wordpress转移到jekyll这个静态模板。</li><li><strong>年中</strong> 更新了个人网站的第三个版式，没错，就是下图这个酷炫到爆的页面。（因为一直抽不出太多的时间<del>其实还是因为懒</del>，移动版的首页一直还没去兼容 Orz~，手机访问的横屏将就吧…）</li></ul><p><img src="https://st-qn.gittt.cn/2016/01/07/home.png?v=1" alt=""></p><p>在这过程中学到了很多东西，尝试了很多酷炫的效果。接触了GitHub、接触了Linux、云服务器、域名解析、CND、SVG、Cnavas等等，很有意思~</p><p>可惜当初没考虑那么多，第二版直接覆盖迭代了，哪天抽空把它找回来（GitHub赛高！），专门整个仓库来展示这些版式，以及接下来的第四版，第五版…</p><h4 id="访问地址"><a href="#访问地址" class="headerlink" title="访问地址"></a>访问地址</h4><ul><li>第一版：<a href="http://zhuowenli.sinaapp.com/" target="_blank" rel="noopener">http://zhuowenli.sinaapp.com/</a></li><li>第三版：<a href="http://zhuowenli.github.io" target="_blank" rel="noopener">http://zhuowenli.github.io</a></li></ul><h3 id="开源与GitHub"><a href="#开源与GitHub" class="headerlink" title="开源与GitHub"></a>开源与GitHub</h3><p>接下来来说说开源与GitHub吧，这是我的主页，还是比较惨不忍睹的。欢迎大家来follow，给我也涨涨粉哈哈<del>~</del></p><p><a href="http://www.github.com/zhuowenli" target="_blank" rel="noopener"><img src="https://st-qn.gittt.cn/2016/01/07/github.png?v=1" alt=""></a></p><p>实话说这也算是我第一年玩github，虽然14年就知道了这东西的存在，但也就用来找找开源库、框架什么的，然后傻傻的下了个zip包下来… 直到今年，才算是真正明白了 git 在版本控制、团队协作、分支管理等各方面的精妙之处。</p><p>真正开始接触GitHub也是在整个人博客的时候，实在是接受不了wordpress那『臃肿』的结构，然后就发现了jekyll这个简而美的模板引擎。然后就开始维护和开源一些东西，再之后就根本停不下来了。就算是一个人的项目也要扔到GitHub上，毕竟可以随时随地的 <code>git pull</code>、<code>git push</code> 实在太方便了。</p><h3 id="从『切图仔』到『工程师』"><a href="#从『切图仔』到『工程师』" class="headerlink" title="从『切图仔』到『工程师』"></a>从『切图仔』到『工程师』</h3><p>接下来说说学习历程。</p><p>想想2013~2014年开始接触前端时，水平真的就是个『切图』的。写写页面到还好，html、css功底也算比较扎实，但是JavaScript完全就是半桶水了。对于大项目、多人协作、环境搭建、技术选型、前端架构什么的更加就没什么概念了。</p><p>15年一路下来，接触的东西突然一下子多到不知道从何说起，光光脑海里能够想到的关键字就有这么一大堆了：</p><ul><li>前端工程、前端架构、组件化、模块化、SPA、React、Vue、MV**、Flux、CommonJS</li><li>ES2015、ES2016、CSS4、Webpack、Babel、Grunt、Gulp、Browserify、Flex、PostCSS</li><li>NodeJS、npm、bower、服务端模板、Nginx、GitHub、git</li><li>Hybrid、JS Bridge、Webview、React-Native</li><li>HTTP、CDN、重定向、RESTful、本地存储</li><li>团队、资源、业务、价值</li><li>Linux、OSX、Git、Shell、CLI、等等等等不知凡几…</li></ul><p>虽然讲不清、道不明，但是我确定我现在的思想跟2014年肯定是有哪里不同了。这里面不乏新词，数量也相当可观。真正让我感受到成长的并不是学到的东西有多么的牛逼，用到的东西有多么的酷炫；而是能开始站在一个更高更广的角度去思考各种开发场景所面对的问题，并且能找到最适合道路。我想这大概就是从『切图仔』到『工程师』了吧。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>伴随着成长的还有工作上的变动，2015年3月份我离开快易拍，加入了『<a href="http://www.meiyaapp.com/" target="_blank" rel="noopener">美芽</a>』这个伐木累。在这里，虽然工作比较忙、一个人要负责更多的项目，但是却我获得了更多的空间来学习和推动一些事情：</p><ul><li>基于Hybrid的应用开发</li><li>基于Angular的SPA应用开发</li><li>基于数据可视化的前台开发</li><li>写微信小游戏</li><li>搭建前端工程</li><li>使用最流行的技术</li><li>编写基于CommonJS风格的代码</li><li>开发网页编辑器</li><li>各种自动化工具</li></ul><p>在各种项目、各种角色之间来回切换；在不是那么充足的时间里，完成、实现并协调好各方接踵而来的大量需求，确实是件很锻炼人的事情。</p><p>当然，显而易见的也有很多不足之处，比如一些小项目经常没有考虑到后续的扩展，比如时间方面的协调把控，比如任务优先的分级排列，比如人太好导致有什么事情都找前端~ 额… 这些都是我的短板，既然发现了问题今年就要努力的改进，加油！</p><h3 id="黑科技"><a href="#黑科技" class="headerlink" title="黑科技"></a>黑科技</h3><p>曾经我也是跟一个普通程序猿一样，勤勤恳恳的忙碌着，十年如一日的做着重复的事情。但是，自从我结实了CLI，结实了Gulp、Grunt等等一大堆工具，感觉我也快变成一个living inside the terminal（活在终端里）的人了。</p><p>比如前端最经常使用的图片压缩：曾经我会跑到<a href="http://www.tinypng.com" target="_blank" rel="noopener">tinypng.com</a>这个神奇的网站一张一张的压缩图片然后下载下来（付费插件买不起Orz）；然后多来几次就受不了了，就找到了windows、或者mac下的一些压缩工具<a href="https://pngquant.org/PNGoo.0.1.1.zip" target="_blank" rel="noopener">PNGoo</a>、<a href="https://nukesaq88.github.io/Pngyu/" target="_blank" rel="noopener">Pngyu</a>、<a href="http://pngmini.com/" target="_blank" rel="noopener">ImageAlpha</a>等。最后，还是觉得太麻烦，在项目开始的时候，直接用<code>npm</code>命令下载一个<code>imagemin-pngquant</code>的依赖，写个配置文件，然后一行命令就自动帮你压缩打包好所有图片了。</p><p>比如文件压缩，比如代码混淆、合并，比如代码预编译，代码兼容处理等等。这些经常需要重复重复再重复的东西，在去年我还能逐个找到一些很好用的图形工具如<a href="http://koala-app.com/" target="_blank" rel="noopener">Koala</a>、<a href="http://incident57.com/codekit/" target="_blank" rel="noopener">Codekit</a>等等，但是现在就全部迁移到了CLI上，一行命令解决所有困恼，你值得拥有！</p><p>『懒人』是推动技术进步最重要的动力!</p><p>所以连家里的台式机都给它装了个黑苹果，因为Windows下的命令行实在是太操蛋了！远离Windows开发，珍爱程序猿生命！</p><h2 id="2016规划"><a href="#2016规划" class="headerlink" title="2016规划"></a>2016规划</h2><ol><li>深入研究下NodeJS，而不是现在就单纯拿来写工具。</li><li>搞一搞Service Workers，好让自己跟上方兴未艾的网站即应用大潮。</li><li>增加更多的阅读时间，无论是专业还非专业书籍。</li><li>研究下Arduino或者树莓派，虽然Web一路高歌猛进，但了解一点硬件也挺好。</li><li>多增加一些跟同行沟通的机会。</li><li>多在自己的博客上发表文章。</li><li>深入一下ES2015、ES2016，能在项目上真正使用。</li></ol><p>回顾自己曲折离奇的学习路线，感觉多看一些东西多掌握一些技术对自己的成长确实是很有帮助的。专攻一项技术并不简单的意味着不用去了解其他技术。这不仅仅是眼界的提升，你的思想，你想做的事儿，你所考虑问题的层次都会跟以前有很大不同。</p><p>个人觉得全栈是工程师成长之后的必然结果，但是千万不要为了全栈而全栈。比如什么『NodeJS真好，学完之后前端工程师就能写后端了，就是全栈工程师了』，什么『快去学ReactNative啊！学完了就能开发客户端了，就是全栈工程师啦』。如果只是为了收集『全栈工程师』的这个称号，那么在学习这件事上就已经变了味了，就不会有那么高的动力，学习就变成一件很痛苦的过程。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对比下去年写的<a href="/diary/2015.html">《回首2014，规划2015》</a>，感觉今年又是忙忙碌碌的一年。年度的计划也实现了大半，同时也希望今年能够更加的给力！</p><p>貌似还有很多值得写的东西没写，比如iPhone 6s、Macbook、JBL、new PC、败家之眼、水冷、UMX3、Cherry、iPad、黑苹果、翻墙、Xbox One这些新玩具；再比如身边有趣的小伙伴；再比如出游；再比如搬家、有意思的房东阿姨；再比如…</p><p>趁着现在还年轻，多走走看看，多学点东西，等将来哪天老了、懒了、学不动了。才有资格跟后来者吹吹牛皮，哈哈哈~</p><p>不知不觉洋洋洒洒又写了这么多。回顾自己一年里的经历和成长确实是一件很有意义也很有趣的事情。</p><p>最后，祝大家：2016，一直666666<del>~</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了一年一度的年终总结辣，去年也是差不多这个时候发表了一篇&lt;a href=&quot;/diary/2015.html&quot;&gt;《回首2014，规划2015》&lt;/a&gt;，今年按例写一篇年终总结。聊以此文，纪念逝去的青葱…&lt;/p&gt;
    
    </summary>
    
    
      <category term="diary" scheme="https://www.zhuowenli.com/categories/diary/"/>
    
    
      <category term="2015" scheme="https://www.zhuowenli.com/tags/2015/"/>
    
      <category term="2016" scheme="https://www.zhuowenli.com/tags/2016/"/>
    
  </entry>
  
  <entry>
    <title>background-blend-mode</title>
    <link href="https://www.zhuowenli.com/frontend/background-blend-mode.html"/>
    <id>https://www.zhuowenli.com/frontend/background-blend-mode.html</id>
    <published>2015-09-11T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.592Z</updated>
    
    <content type="html"><![CDATA[<p>CSS中的<code>background-blend-mode</code>（背景混合模式）属性定义了元素的多个背景之间如何互相混合。</p><a id="more"></a><p>使用<code>background-blend-mode</code>，你就可以实现在一个元素上混合多个背景层（图片或者颜色）。</p><p>该属性的值可以是一个或者多个的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/blend-mode" target="_blank" rel="noopener"><code>&lt;blend-mode&gt;</code></a>（混合模式）。混合模式让你可以指定混合的背景，从而改变背景交叉区域的颜色。使用特定颜色公式来混合基色和目标色。</p><p>混合模式应该按<code>background-image</code>属性同样的顺序定义。如果混合模式数量与背景图像的数量不相等，它会被截取至相等的数量。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-blend-mode</span>: &lt;<span class="selector-tag">blend-mode</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单值 */</span></span><br><span class="line"><span class="selector-tag">background-blend-mode</span>: <span class="selector-tag">normal</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 双值，每个背景一个值 */</span></span><br><span class="line"><span class="selector-tag">background-blend-mode</span>: <span class="selector-tag">darken</span>, <span class="selector-tag">luminosity</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-blend-mode</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">background-blend-mode</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">background-blend-mode</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><h4 id="值"><a href="#值" class="headerlink" title="值"></a>值</h4><p>一个<code>&lt;blend-mode&gt;</code>定义混合的模式，可以有多个值，用逗号间隔。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在<code>luminosity</code>混合模式中，可以创建单色的背景效果。</p><p>下面的例子使用了<code>luminosity</code>作为<code>background-blend-mode</code>的值，使背景图片和背景颜色混合，让图片“失色”。<a href="https://st-qn.gittt.cn/2015/09/11/1.jpg" target="_blank" rel="noopener">查看原图</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-1</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://st-qn.gittt.cn/<span class="number">2015</span>/<span class="number">09</span>/<span class="number">11</span>/<span class="number">1</span>.jpg);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">background-blend-mode</span>: luminosity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="demo">    <div class="el el-1"></div></div><hr><p>同样，您可以混合两个或多个重合在一起的图像，让他们重合在一起。</p><p>下例的<code>background-image</code>有两个值：一张图片以及一个线性的背景，然后使用<code>overlay</code>这个混合模式来进行混合。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-2</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, #f00, #<span class="number">0</span>f0), <span class="built_in">url</span>(https://st-qn.gittt.cn/<span class="number">2015</span>/<span class="number">09</span>/<span class="number">11</span>/<span class="number">1</span>.jpg);</span><br><span class="line">    <span class="attribute">background-blend-mode</span>: overlay;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="demo">    <div class="el el-2"></div></div><p>如果你有两张背景图，你也可以把这两张图片混合在一起：<a href="https://st-qn.gittt.cn/2015/09/11/1.jpg" target="_blank" rel="noopener">图1</a> <a href="https://st-qn.gittt.cn/2015/09/11/2.jpg" target="_blank" rel="noopener">图2</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-3</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://st-qn.gittt.cn/<span class="number">2015</span>/<span class="number">09</span>/<span class="number">11</span>/<span class="number">1</span>.jpg), <span class="built_in">url</span>(https://st-qn.gittt.cn/<span class="number">2015</span>/<span class="number">09</span>/<span class="number">11</span>/<span class="number">2</span>.jpg);</span><br><span class="line">    <span class="attribute">background-color</span>: olive;</span><br><span class="line">    <span class="attribute">background-blend-mode</span>: color-burn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="demo">    <div class="el el-3"></div></div><p>使用不同混合模式，就好呈现出不用的效果。</p><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><p><a href="https://drafts.fxtf.org/compositing-1/#background-blend-mode" target="_blank" rel="noopener">《Compositing and blending Level 1 background-blend-mode》</a></p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><iframe src="http://caniuse.com/css-backgroundblendmode/embed/"></iframe><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://drafts.fxtf.org/compositing-1/#background-blend-mode" target="_blank" rel="noopener">Compositing and blending Level 1 background-blend-mode</a></li><li><a href="http://sarasoueidan.com/blog/compositing-and-blending-in-css/" target="_blank" rel="noopener">COMPOSITING AND BLENDING IN CSS</a></li></ul><style type="text/css">    .demo{        margin: 40px 0;        max-width: 800px;    }    .el{        width: 800px;        height: 500px;        -webkit-background-size: 100%;        background-size: 100%;    }    .el-1{        background-image: url(https://st-qn.gittt.cn/2015/09/11/1.jpg);        background-color: #000;        background-blend-mode: luminosity;    }    .el-2 {        background-image: linear-gradient(to bottom, #f00, #0f0), url(https://st-qn.gittt.cn/2015/09/11/1.jpg);        background-blend-mode: overlay;    }    .el-3 {        background-image: url(https://st-qn.gittt.cn/2015/09/11/1.jpg), url(https://st-qn.gittt.cn/2015/09/11/2.jpg);        background-color: olive;        background-blend-mode: color-burn;    }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS中的&lt;code&gt;background-blend-mode&lt;/code&gt;（背景混合模式）属性定义了元素的多个背景之间如何互相混合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="css3" scheme="https://www.zhuowenli.com/tags/css3/"/>
    
      <category term="css" scheme="https://www.zhuowenli.com/tags/css/"/>
    
      <category term="background-blend-mode" scheme="https://www.zhuowenli.com/tags/background-blend-mode/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下使用.htaccess实现301重定向</title>
    <link href="https://www.zhuowenli.com/diary/ubuntu-htaccess-301.html"/>
    <id>https://www.zhuowenli.com/diary/ubuntu-htaccess-301.html</id>
    <published>2015-09-10T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>最近在<a href="https://www.digitalocean.com/?refcode=6ecb75692729" target="_blank" rel="noopener" title="DigitalOcean">DigitalOcean</a>搞了台服务器(一个月只要$5哟~)，顺便把博客迁移到这上面。博主有两个域名：<a href="http://zhuowenli.github.io" target="_blank" rel="noopener" title="http://zhuowenli.github.io">zwlme.com</a>、<a href="http://zhuowenli.github.io" target="_blank" rel="noopener" title="http://zhuowenli.github.io">zhuowenli.com</a>，然后就想让所有的域名都可以直接跳转到<a href="http://zhuowenli.github.io" target="_blank" rel="noopener" title="http://zhuowenli.github.io">zhuowenli.github.io</a>这个主域名上。</p><p>尝试了几个方案，最终觉得用<code>.htaccess</code>来实现域名跳转到<a href="http://zhuowenli.github.io" target="_blank" rel="noopener" title="http://zhuowenli.github.io">zhuowenli.github.io</a>会比较友好。</p><p>今天博主就来给大家分享如何使用<code>.htaccess</code>实现301重定向。</p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>首先，我们需要把两个域名都通过A记录解析到服务器上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// zhuowenli.com</span><br><span class="line">记录类型  主机记录  记录值</span><br><span class="line">A        www     [:服务器ip地址]  // 将域名解析为zhuowenli.github.io</span><br><span class="line">A        @       [:服务器ip地址]  // 将域名解析为zhuowenli.com（不带www）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// zwlme.com</span><br><span class="line">记录类型  主机记录  记录值</span><br><span class="line">A        www     [:服务器ip地址]  // 将域名解析为zhuowenli.github.io</span><br><span class="line">A        @       [:服务器ip地址]  // 将域名解析为zwlme.com（不带www）</span><br></pre></td></tr></table></figure><h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><p>博主在购买服务器的时候，选择了有lamp的镜像，所以只要配置下Apache，把网站根目录指向博客根目录下的<code>_site</code>文件就行了，具体过程：</p><p>略。</p><h2 id="设置重定向"><a href="#设置重定向" class="headerlink" title="设置重定向"></a>设置重定向</h2><p>在网站根目录下创建<code>.htaccess</code>文件，然后编辑该文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到网站根目录</span></span><br><span class="line"><span class="comment"># 创建.htaccess</span></span><br><span class="line">touch .htaccess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑该文件</span></span><br><span class="line">vim .htaccess</span><br></pre></td></tr></table></figure><p>输入如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动重写引擎</span></span><br><span class="line">RewriteEngine On</span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配以zhuowenli.github.io、zwlme.com、或者zhuowenli.com开头的域名</span></span><br><span class="line">RewriteCond %&#123;http_host&#125; ^(www.)?zwlme.com$ [NC,OR]</span><br><span class="line">RewriteCond %&#123;http_host&#125; ^zhuowenli.com$ [NC]</span><br><span class="line"></span><br><span class="line"><span class="comment">#这些域名的任何网址都重定向到zhuowenli.github.io，返回码是301</span></span><br><span class="line">RewriteRule ^(.*)$ http://zhuowenli.github.io/<span class="variable">$1</span> [R=301,L]</span><br></pre></td></tr></table></figure><p>然后，还没完呢！</p><h2 id="重新配置Apache（基于LAMP）"><a href="#重新配置Apache（基于LAMP）" class="headerlink" title="重新配置Apache（基于LAMP）"></a>重新配置Apache（基于LAMP）</h2><p>编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到Apache配置目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/apache2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行ls命令会发现下列文件、文件夹</span></span><br><span class="line">apache2.conf  conf-available  conf-enabled  envvars  magic  mods-available  mods-enabled  ports.conf  sites-available  sites-enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vim apache2.conf</span><br></pre></td></tr></table></figure><p>将<code>apache2.conf</code>下所有的 <code>AllowOverride None</code> 改为 <code>AllowOverride All</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride None</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为：</span></span><br><span class="line">AllowOverride All</span><br></pre></td></tr></table></figure><p>启用<code>mod_rewrite.so</code>模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将mods-available目录下的rewrite.load复制到mods-enabled下</span></span><br><span class="line">cp mods-available/rewrite.load mods-enabled/</span><br></pre></td></tr></table></figure><p>OK！配置完毕，接下来重启下Apache服务就行啦</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure><p>最后，你就会发现：访问<a href="http://zwlme.com" target="_blank" rel="noopener">zwlme.com</a>、<a href="http://zhuowenli.github.io" target="_blank" rel="noopener" title="http://zhuowenli.github.io">zhuowenli.github.io</a>或者<a href="http://zhuowenli.com" target="_blank" rel="noopener">zhuowenli.com</a>的时候，域名都会自动跳转到<a href="http://zhuowenli.github.io" target="_blank" rel="noopener" title="http://zhuowenli.github.io">zhuowenli.github.io</a>这个主域名了！。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在&lt;a href=&quot;https://www.digitalocean.com/?refcode=6ecb75692729&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;DigitalOcean&quot;&gt;DigitalOcean&lt;/a&gt;搞了台服务
      
    
    </summary>
    
    
      <category term="diary" scheme="https://www.zhuowenli.com/categories/diary/"/>
    
    
      <category term="ubuntu" scheme="https://www.zhuowenli.com/tags/ubuntu/"/>
    
      <category term="301" scheme="https://www.zhuowenli.com/tags/301/"/>
    
      <category term="htaccess" scheme="https://www.zhuowenli.com/tags/htaccess/"/>
    
      <category term="lamp" scheme="https://www.zhuowenli.com/tags/lamp/"/>
    
  </entry>
  
  <entry>
    <title>通过GitHub Pages创建博客（一）</title>
    <link href="https://www.zhuowenli.com/frontend/build-github-blog-pages-1.html"/>
    <id>https://www.zhuowenli.com/frontend/build-github-blog-pages-1.html</id>
    <published>2015-08-06T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.592Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章将会教你如何通过GitHub，在GitHub上创建自己的博客或者项目主页。这里只是把自己在使用GitHub开发过程中的经验和总结分享给大家，方便大家逐步开始GitHub之旅。</p><a id="more"></a><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>不仅为程序员提供了免费源代码托管空间，还为程序员提供了一个社交平台。不但允许大家在GitHub上创建自己的博客网站或主页（<a href="https://pages.github.com/" target="_blank" rel="noopener">github pages</a>），并且免费，不限流量，还可以绑定自己的域名。</p><p>但是GitHub提供的主页实际上是基于GitHub的源代码实现的，所以只支持上传静态的网页，不能在上面创建真正的博客系统。不过，万幸的是，GitHub支持一种叫<a href="http://jekyllcn.com/" target="_blank" rel="noopener">jekyll</a>的静态页面模板引擎，也就是说只要上传符合jekyll规范的文件，GitHub会用这种模板引擎为你转化静态页面和网站。</p><h2 id="关于jekyll"><a href="#关于jekyll" class="headerlink" title="关于jekyll"></a>关于jekyll</h2><p>这个jekyll到底是什么？</p><p>实际上jekyll本质上就是一个<strong>模板转化引擎</strong>。同时它也是GitHub上的一个开源项目：<a href="https://github.com/jekyll/jekyll" target="_blank" rel="noopener">Jekyll</a></p><p>jekyll本身基于Ruby，也可以看成是一种模板引擎<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers" target="_blank" rel="noopener">liquid</a>的扩展。jekyll对liquid的主要扩展在于两点：</p><ul><li>内建专用于博客网站的对象，可以在模板中引用这些对象：<code>page</code>、<code>site</code>等</li><li>对liquid进行了扩展，方便构建博客网站</li></ul><p>类似其他的模板引擎一样，<strong>标记</strong>是模板引擎解析的关键，liquid设计了如下两种标记：</p>- `{{ }}`：此标记表征的是将其中的变量转化成文本- `{% %}`：此标记用于包含控制流关键字，比如：`{% if %}`、`{% for x in xx %}`<p>显而易见的是，有了这种标记的支持，再加上jekyll内建的对象，构建网站就方便不少了。</p><p>可能有朋友会更其他的服务器端脚本语言比较，比如<code>jsp</code>、<code>php</code>…，但是一定要记得的是，jekyll对模板的解析仅仅只有一次，它的目的就是将模板一次性的转化成静态网站，而不是上述的动态网站脚本语言。</p><p>更多内容可以去阅读jekyll的<a href="http://jekyllcn.com/" target="_blank" rel="noopener" title="http://jekyllcn.com/">帮助文档</a>，或者GitHub</p><h2 id="关于GitHub-Pages"><a href="#关于GitHub-Pages" class="headerlink" title="关于GitHub-Pages"></a>关于GitHub-Pages</h2><p>github-pages是一个免费的静态网站托管平台，由github提供，它具有以下几个特点：</p><ul><li>无限免费空间，无限免费流量</li><li>具有项目主页和个人主页两种选择</li><li>支持页面生成，可以使用jekyll来布局页面，使用markdown来书写正文</li><li>可以自定义域名</li></ul><p>对于普通的博主来说，用项目主页或者个人主页并无所谓。更多关于主页类型，请参见：<a href="https://help.github.com/articles/user-organization-and-project-pages" target="_blank" rel="noopener" title="https://help.github.com/articles/user-organization-and-project-pages">User, Organization and Project Pages</a></p><p>github-pages<strong>仅仅</strong>为我们提供了<strong>静态页面的托管</strong>，不要说不能用wordpress，连基本的评论，访问统计都得自己想办法（幸好都有解决方案，接下去我们会慢慢介绍）。</p><h3 id="创建项目仓库"><a href="#创建项目仓库" class="headerlink" title="创建项目仓库"></a>创建项目仓库</h3><p>在创建博客之前，还需要用自己的帐号创建一个项目。在Git中，项目被称为仓库(Repository)，仓库顾名思义，当然可以包含代码或者非代码。将来我们的网页或者模板实际上都是保存在这个仓库中的。</p><p>登录后，访问<a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a>，创建仓库。</p><h3 id="项目主页"><a href="#项目主页" class="headerlink" title="项目主页"></a>项目主页</h3><p><strong>项目主页</strong>的目的是为项目提供一个展示功能的网页，方便项目推广。但是也可以用来做个人博客。对于博客来说，博客的整个网站目录必须是项目仓库的<code>gh-pages</code>分支。</p><p>通过<a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a>上的向导，可以在你的项目仓库中创建这样的分支，并且github还提供了多种模板供你选择：</p><p><img src="https://st-qn.gittt.cn/2015/08/06/themes.png" alt=""></p><p>通过向导自动创建的项目的访问地址类似这样<code>http://username.github.io/仓库名/</code>，在使用自定义域名前，你需要通过这样的链接访问项目主页。它是一个纯粹为项目推广准备的，因此并没有博客的结构，但是自定义模板的功能确实很不错。</p><p>手动创建分支的方法，也很简单，可以参考<a href="https://help.github.com/articles/creating-project-pages-manually" target="_blank" rel="noopener">Creating Project Pages manually</a></p><h3 id="个人主页"><a href="#个人主页" class="headerlink" title="个人主页"></a>个人主页</h3><p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是<code>username/username.github.io</code>，这是特殊的命名约定。你可以通过<code>http://username.github.io</code>来访问你的个人主页。</p><p>通过向导很容易创建一个仓库，并测试成功。不过，同样的，没有博客的结构。需要注意的个人主页的网站内容是在master分支下的。</p><p>例如本站项目地址：<a href="https://github.com/zhuowenli/zhuowenli.github.io" target="_blank" rel="noopener" title="https://github.com/zhuowenli/zhuowenli.github.io">zhuowenli.github.io</a></p><h2 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h2><p>创建了仓库后，我们就需要管理它，无论是管理本地仓库还是远程仓库都需要Git客户端。Git客户端实际上十分强大，它本身就可以offline的创建本地仓库，而本地仓库和远程仓库之间的同步也是通过Git客户端完成的。</p><p>MAC下只要两行命令就可以安装好Git。打开终端，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>Homebrew可以很方便的在OS X下安装一些工具包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><p>这里省略了windows下安装和使用Git客户端的基本技巧，你可以访问 <a href="http://git-scm.com/" target="_blank" rel="noopener" title="http://git-scm.com/">这个网站</a> 下载Git客户端。具体步骤请自行谷歌百度。</p><h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><p>jekyll本身基于Ruby开发，因此，想要在本地构建一个测试环境需要具有Ruby的开发和运行环境。</p><p>MAC默认带有ruby的运行环境了，这个步骤可以跳过。</p><p>至于在windows下，可以使用<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener">Rubyinstaller</a>安装。windows的安装还是一如既往的“无脑”，不多说了。</p><p>至于Linux下可以参考<a href="https://ruby-china.org/wiki/install_ruby_guide" target="_blank" rel="noopener">如何快速正确的安装 Ruby, Rails 运行环境</a>。</p><p><em>附：<a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">ruby安装说明</a></em></p><p>如果想要快速体验ruby开发，可以参考：<a href="http://www.ruby-lang.org/zh_cn/documentation/quickstart/" target="_blank" rel="noopener">20分钟体验 Ruby</a></p><h3 id="安装Bundle"><a href="#安装Bundle" class="headerlink" title="安装Bundle"></a>安装Bundle</h3><p>Ruby Rails 3 中引入Bundle来管理项目中所有gem依赖，该命令只能在一个含有Gemfile的目录下执行。这里使用Bundle，可以很方便的帮我们安装好那些乱七八糟的环境。</p><p>打开你安装好的<code>Git Bash</code>，或者MAC下的<code>终端</code>。然后直接使用下面命令安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install bundle</span><br></pre></td></tr></table></figure><h3 id="Gemfile和Bundle安装"><a href="#Gemfile和Bundle安装" class="headerlink" title="Gemfile和Bundle安装"></a>Gemfile和Bundle安装</h3><p>在根目录下创建一个叫<code>Gemfile</code>的文件，注意没有后缀，打开文件，输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">'http://ruby.taobao.org/'</span></span><br><span class="line">gem <span class="string">'github-pages'</span></span><br></pre></td></tr></table></figure><p>保存后，在命令行中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>该命令会根据当前目录下的Gemfile，安装所需要的所有软件。这一步所安装的东西，可以说跟github本身的环境是完全一致的，所以可以确保本地如果没有错误，上传后也不会有错误。而且可以在将来使用下面命令，随时更新环境，十分方便。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle update</span><br></pre></td></tr></table></figure><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><p>接下来我们把，创建好的GitHub仓库<strong>clone</strong>到本地，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zhuowenli/zhuowenli.github.io.git</span><br></pre></td></tr></table></figure><p>进入clone到本地的这个文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zhuowenli.github.io</span><br></pre></td></tr></table></figure><p>使用下面命令，就可以启动本地服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> jekyll serve</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/08/06/jekyll.png" alt=""></p><p>如图，每当本地的文件发生改变时，jekyll会自动编译发生改变的文件，在<code>_site</code>文件夹里面生成用来展示的静态html页面。</p><p>jekyll此时会在localhost的4000端口监听http请求，用浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener" title="http://localhost:4000/">http://localhost:4000/</a>，本地的页面出现了！</p><p><img src="https://st-qn.gittt.cn/2015/08/06/localhost.png" alt=""></p><p>至此，我们就知道了如何创建一个博客站，并且在线上及本地环境运行。接下来我会继续教大家如何从无到有一步一步的自定义创建博客，组织编辑内容，域名解析，评论统计等等。</p><p>敬请期待~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本系列文章将会教你如何通过GitHub，在GitHub上创建自己的博客或者项目主页。这里只是把自己在使用GitHub开发过程中的经验和总结分享给大家，方便大家逐步开始GitHub之旅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="github" scheme="https://www.zhuowenli.com/tags/github/"/>
    
      <category term="github pages" scheme="https://www.zhuowenli.com/tags/github-pages/"/>
    
      <category term="jekyll" scheme="https://www.zhuowenli.com/tags/jekyll/"/>
    
  </entry>
  
  <entry>
    <title>Flux 入门教程</title>
    <link href="https://www.zhuowenli.com/frontend/the-flux-quick-start-guide.html"/>
    <id>https://www.zhuowenli.com/frontend/the-flux-quick-start-guide.html</id>
    <published>2015-07-30T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>本文将概括性的介绍如何使用 Flux 架构开发 JavaScript 应用，用尽可能少的篇幅带你熟悉 Flux 的核心概念。你可以结合这些<a href="https://github.com/zhuowenli/flux-starter-kit" target="_blank" rel="noopener">代码</a>阅读本文。 一起学习。你最好先对 React 有基本的了解，并且有一些开发 React 组件的经验。如果不熟悉也没关系，可以先读一读这篇文章 <a href="/frontend/the-react-quick-start-guide.html">React 入门教程</a>。</p><svg class="flux" width="89px" height="36px" viewBox="0 0 89 36" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">  <path d="M70.92,0.34 C67.466,0.34 64.249,1.344 61.535,3.069 L44.439,15.625 L35.428,9.008 C34.885,9.889 34.338,10.765 33.815,11.672 C33.689,11.89 33.572,12.111 33.448,12.329 L40.98,17.86 L25.175,29.466 C23.009,30.816 20.517,31.53 17.958,31.53 C10.421,31.53 4.288,25.398 4.288,17.86 C4.288,10.322 10.42,4.19 17.958,4.19 C20.517,4.19 23.01,4.903 25.175,6.254 L26.746,7.407 C27.395,6.285 28.068,5.189 28.747,4.101 L27.343,3.07 C24.63,1.344 21.412,0.341 17.958,0.341 C8.283,0.341 0.439,8.185 0.439,17.86 C0.439,27.535 8.282,35.379 17.958,35.379 C21.412,35.379 24.63,34.375 27.343,32.65 L44.439,20.095 L53.485,26.738 C54.039,25.83 54.592,24.919 55.139,23.97 C55.247,23.782 55.345,23.595 55.452,23.407 L47.899,17.86 L63.703,6.254 C65.869,4.904 68.362,4.19 70.92,4.19 C78.458,4.19 84.59,10.322 84.59,17.86 C84.59,25.398 78.458,31.53 70.92,31.53 C68.361,31.53 65.869,30.817 63.703,29.466 L62.155,28.329 C61.499,29.462 60.835,30.563 60.168,31.645 L61.536,32.649 C64.25,34.375 67.467,35.378 70.921,35.378 C80.596,35.378 88.44,27.534 88.44,17.859 C88.439,8.184 80.596,0.34 70.92,0.34 L70.92,0.34 Z" fill="#44B74A">  </path></svg><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Flux 是用来构建用户端 Web 应用的架构，它包含三个核心概念：<code>Views</code>, <code>Stores</code> 和 <code>Dispatcher</code>，还有一些次级概念：<code>Actions</code>, <code>Action Types</code>, <code>Action Creators</code> 和 <code>Web Utils</code>。</p><p>请耐心学习以下概念定义然后再看后面的教程。当你准备开始开发 Flux 应用之前，建议你再回过头来看一遍基本概念。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li><code>Views</code> 即 React 组件。它们负责渲染界面，捕获用户事件，从 Stores 获取数据。</li><li><code>Stores</code> 用于管理数据。 一个 Store 管理一个区域的数据，当数据变化时它负责通知 Views。</li><li><code>Dispatcher</code> 接收新数据然后传递给 Stores，Stores 更新数据并通知 Views。</li></ul><h3 id="次级概念"><a href="#次级概念" class="headerlink" title="次级概念"></a>次级概念</h3><ul><li><code>Actions</code> 是传递给 Dispatcher 的对象，包含新数据和 Action Type。</li><li><code>Action Types</code> 指定了可以创建哪些 Actions，Stores 只会更新特定 Action Type 的 Actions 触发的数据。</li><li><code>Action Creators</code> 是 Actions 的创建者，并将其传递给 Dispatcher 或 Web Utils。</li><li><code>Web Utils</code> 是用于与外部 API’s 通信的对象。例如 Actions Creator 可能需要从服务器请求数据。</li></ul><p>是不是一次给的信息量太多啦？强烈建议结合这些<a href="https://github.com/zhuowenli/flux-starter-kit" target="_blank" rel="noopener">代码</a> 边看文章边敲代码，可以达到更好的学习效果。</p><p>提示：这里省略了 <code>constants</code> 和 <code>Web Utils</code>，是为了更快速简单地理解 Flux。更深入阅读 <a href="https://github.com/facebook/flux/tree/master/examples" target="_blank" rel="noopener">官方示例</a> 能很好地补充这些知识。</p><h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>部署好 <a href="https://github.com/zhuowenli/flux-starter-kit" target="_blank" rel="noopener">开发代码</a> 后，你会看到在 <code>js</code> 目录下有个 <code>app.js</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">var</span> Comments = <span class="built_in">require</span>(<span class="string">'./views/comments'</span>);</span><br><span class="line"><span class="keyword">var</span> CommentForm = <span class="built_in">require</span>(<span class="string">'./views/comment-form'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> App = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Comments /&gt;</span><br><span class="line">                &lt;CommentForm /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">React.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><p>上面代码把 <code>Views</code> 渲染到 DOM 中。先忽略 <code>Comments</code>，看一下 <code>CommentFrom</code> 的实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CommentActionCreators = <span class="built_in">require</span>(<span class="string">'../actions/comment-action-creators'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CommentForm = React.creatClass(&#123;</span><br><span class="line">    onSubmit: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> textNode = <span class="keyword">this</span>.refs.text.getDOMNode();</span><br><span class="line">        <span class="keyword">var</span> text = textNode.value;</span><br><span class="line"></span><br><span class="line">        textNode.value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        CommentActionCreators.createComment(&#123;</span><br><span class="line">            text: text</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">'comment-form'</span>&gt;</span><br><span class="line">                &lt;textarea ref=<span class="string">'text'</span> /&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.onSubmit&#125;&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CommentForm;</span><br></pre></td></tr></table></figure><p><code>CommentForm</code> 依赖的 <code>CommentActionCreators</code> 是一个 Action Creator (正如它的名字一样)。</p><p>当表单提交时 <code>createComment</code> 函数传递了 <code>comment</code> 对象，它的值是根据 <code>textarea</code> 的值构造出来的。让我们开发这个 Action Creator 来接收 <code>comment</code>。</p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>在 <code>actions</code> 目录里创建 `comment-action-creators.js 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppDispatcher = <span class="built_in">require</span>(<span class="string">'../dispatcher/app-dispatcher'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  createComment: <span class="function"><span class="keyword">function</span>(<span class="params">comment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> action= &#123;</span><br><span class="line">      actionType: <span class="string">"CREATE_COMMENT"</span>,</span><br><span class="line">      comment: comment</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    AppDispatcher.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>createComment</code> 函数构造了一个 Action，包含 Action Type 和 comment 数据，并将这个 Action 传递给 Dispatcher 的 <code>dispatch</code> 函数。</p><p>接下来编写 Dispatcher 用于接收 Actions。</p><p>提示：也可以把这些逻辑写在 View 里面 - 直接跟 Dispatcher 通信，但最佳实践是用 Action Creator。它能降低代码的耦合度并给 Dispatcher 提供一个单独的接口。</p><h2 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h2><p>在 <code>dispatcher</code> 目录下创建 <code>app-dispatcher.js</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Dispatcher = <span class="built_in">require</span>(<span class="string">'flux'</span>).Dispatcher;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> Dispatcher();</span><br></pre></td></tr></table></figure><p>Flux 库的 Dispatcher 提供了一个 <code>dispatch</code> 函数，将接收到的 Actions 传递给所有注册的回调函数，回调函数由 Stores 提供。</p><p>提示：这里没有 Dispatcher 的具体实现，源码在<a href="https://github.com/facebook/flux/blob/master/src/Dispatcher.js#L181" target="_blank" rel="noopener">这里</a>。</p><h2 id="Stores"><a href="#Stores" class="headerlink" title="Stores"></a>Stores</h2><p>在 <code>stores</code> 目录下创建一个 <code>comment-store.js</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppDispatcher = <span class="built_in">require</span>(<span class="string">'../dispatcher/app-dispatcher'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> assign = <span class="built_in">require</span>(<span class="string">'object-assign'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CommentStore = assign(&#123;&#125;, EventEmitter.prototype, &#123;</span><br><span class="line">    emitChange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.emit(<span class="string">'change'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    addChangeListener: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.on(<span class="string">'change'</span>, callback);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    removeChangeListener: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.removeListener(<span class="string">'change'</span>, callback);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getAll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> comments;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">AppDispatcher.register(<span class="function"><span class="keyword">function</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.actionType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"CREAT_COMMENT"</span>:</span><br><span class="line">            comments.push(action.comment);</span><br><span class="line">            CommentStore.emitChange();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CommentStore;</span><br></pre></td></tr></table></figure><p>这段代码分为两部分：创建 Store 和 注册 Store。</p><p>Store 由 <code>EventEmitter.prototype</code> 和自定义对象整合而成。<code>EventEmitter.prototype</code> 给 Store 赋予了订阅和触发事件的能力。</p><p>自定义对象定义了订阅和取消订阅事件的函数，同时定义了 <code>getAll</code> 函数返回 <code>comments</code> 数据。</p><p>然后，通过 Dispatcher 注册了一个回调函数。当 Dispatcher 调用 <code>dispatch</code> 时传递 Actions 参数给每个注册过的回调函数。</p><hr><p>现在我们需要一个 View 来展示 Store 的数据，并订阅数据的变化。</p><p>在 <code>views</code> 目录里有个 <code>comments.js</code> 文件。把它修改成如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CommentStore = <span class="built_in">require</span>(<span class="string">'../stores/comment-store'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStateFromStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        comments: CommentStore.getAll()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Comments = React.createClass(&#123;</span><br><span class="line">    onChange: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(getStateFromStore());</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getStateFromStore();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        CommentStore.addChangeListener(<span class="keyword">this</span>.onChange);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        CommentStore.removeChangeListener(<span class="keyword">this</span>.onChange);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> comments = <span class="keyword">this</span>.state.comments.map(<span class="function"><span class="keyword">function</span>(<span class="params">comment, index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;div className=<span class="string">'comment'</span> key=&#123;<span class="string">'comment-'</span> + index&#125;&gt;</span><br><span class="line">                &#123;comment.text&#125;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            );</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div className='comments'&gt;</span></span><br><span class="line"><span class="regexp">            &#123;comments&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Comments;</span><br></pre></td></tr></table></figure><p><code>getStateFromStores</code> 函数从 Store 获取 comment 数据，并在 <code>getInitialState</code> 中设置为初始值。</p><p>在 <code>componentDidMount</code> 中，<code>onChange</code> 函数作为 <code>addChangeListener</code> 的回调函数，当 Store 触发 <code>change</code> 事件时 <code>onChange</code> 函数将被调用，即当 Store 数据变化时，它用于更新组件的 <code>state</code> 状态。</p><p>最后 <code>componentWillUnmount</code> 将 <code>onChange</code> 事件监听从 <code>Store</code> 移除。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>现在这个 Flux 应用可以运行起来了，同时我们也学习了 Flux 架构的核心概念：<code>Views</code>, <code>Stores</code> 和 <code>Dispatcher</code>。</p><ul><li>当提交 comment 时，View 调用了 Action Creator</li><li>Action Creator 创建一个 Action 并传给 Dispatcher</li><li>Dispatcher 将 Action 发送给 Store 中注册的回调函数</li><li>Store 更新 comment 数据，并触发一个 change 事件</li><li>View 更新 state 并重新渲染界面</li></ul><p>这就是 Flux 的本质，Dispatcher 发送数据给所有 Stores，后者通知 Views 进行更新。</p><p>要想更深入理解 Flux 架构，我建议阅读 <a href="https://facebook.github.io/flux/" target="_blank" rel="noopener">官方文档</a>，还有 <a href="https://github.com/facebook/flux/tree/master/examples" target="_blank" rel="noopener">官方示例</a>。</p><style type="text/css">    .flux{        height: 140px;        margin: 0 auto;        display: block;        width: 252px;    }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将概括性的介绍如何使用 Flux 架构开发 JavaScript 应用，用尽可能少的篇幅带你熟悉 Flux 的核心概念。你可以结合这些&lt;a href=&quot;https://github.com/zhuowenli/flux-starter-kit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码&lt;/a&gt;阅读本文。 一起学习。你最好先对 React 有基本的了解，并且有一些开发 React 组件的经验。如果不熟悉也没关系，可以先读一读这篇文章 &lt;a href=&quot;/frontend/the-react-quick-start-guide.html&quot;&gt;React 入门教程&lt;/a&gt;。&lt;/p&gt;
&lt;svg class=&quot;flux&quot; width=&quot;89px&quot; height=&quot;36px&quot; viewBox=&quot;0 0 89 36&quot; version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
  &lt;path d=&quot;M70.92,0.34 C67.466,0.34 64.249,1.344 61.535,3.069 L44.439,15.625 L35.428,9.008 C34.885,9.889 34.338,10.765 33.815,11.672 C33.689,11.89 33.572,12.111 33.448,12.329 L40.98,17.86 L25.175,29.466 C23.009,30.816 20.517,31.53 17.958,31.53 C10.421,31.53 4.288,25.398 4.288,17.86 C4.288,10.322 10.42,4.19 17.958,4.19 C20.517,4.19 23.01,4.903 25.175,6.254 L26.746,7.407 C27.395,6.285 28.068,5.189 28.747,4.101 L27.343,3.07 C24.63,1.344 21.412,0.341 17.958,0.341 C8.283,0.341 0.439,8.185 0.439,17.86 C0.439,27.535 8.282,35.379 17.958,35.379 C21.412,35.379 24.63,34.375 27.343,32.65 L44.439,20.095 L53.485,26.738 C54.039,25.83 54.592,24.919 55.139,23.97 C55.247,23.782 55.345,23.595 55.452,23.407 L47.899,17.86 L63.703,6.254 C65.869,4.904 68.362,4.19 70.92,4.19 C78.458,4.19 84.59,10.322 84.59,17.86 C84.59,25.398 78.458,31.53 70.92,31.53 C68.361,31.53 65.869,30.817 63.703,29.466 L62.155,28.329 C61.499,29.462 60.835,30.563 60.168,31.645 L61.536,32.649 C64.25,34.375 67.467,35.378 70.921,35.378 C80.596,35.378 88.44,27.534 88.44,17.859 C88.439,8.184 80.596,0.34 70.92,0.34 L70.92,0.34 Z&quot; fill=&quot;#44B74A&quot;&gt;
  &lt;/path&gt;
&lt;/svg&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="react" scheme="https://www.zhuowenli.com/tags/react/"/>
    
      <category term="flux" scheme="https://www.zhuowenli.com/tags/flux/"/>
    
  </entry>
  
  <entry>
    <title>React 入门教程</title>
    <link href="https://www.zhuowenli.com/frontend/the-react-quick-start-guide.html"/>
    <id>https://www.zhuowenli.com/frontend/the-react-quick-start-guide.html</id>
    <published>2015-07-29T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章将概括性的介绍一下如何用 ReactJS 进行开发。我将介绍一些基础知识，不会有过于深入的分析。你可以结合这些<a href="https://github.com/zhuowenli/react-starter-kit" target="_blank" rel="noopener">代码</a>阅读本文。</p><a id="more"></a><div class="atom">  <div class="oval oval-forward"></div>  <div class="oval oval-backward"></div>  <div class="oval oval-horizontal"></div>  <div class="circle"></div></div><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>React 的 API 非常少，简单、易懂、易用。在正式开始之前先介绍几个概念，一个一个来。</p><p><strong>React 元素</strong> 是表现为 HTML 元素的 JavaScript 对象，他们并不真实存在于浏览器中。他们最终表现为类似<code>h1</code>, <code>div</code> 或 <code>section</code> 之类的浏览器元素。</p><p><strong>组件(Components)</strong> 是开发人员创建的 React 元素。他们通常包含了用户界面的结构和功能。 比如 <code>NavBar</code>、 <code>LikeButton</code>、<code>ImageUploader</code>等等。</p><p><strong>JSX</strong> 是一种创建 React 元素和 components 的技术。例如 <code>&lt;h1&gt;Hello&lt;/h1&gt;</code> 是一个用 JSX 写的 React 元素。同样可以用纯 JavaScript 写成 <code>React.DOM.h1(null, &#39;Hello&#39;);</code>。JSX 读写起来更轻松，最终上线之前必须将 JSX 语句转为 JavaScript 语句。</p><p><strong>虚拟DOM</strong> 是由 React 元素和 components 组成的 JavaScript 树形结构对象。React 将虚拟 DOM 渲染到浏览器中变成最终的用户界面。React 会观察虚拟 DOM 的变化，并自动将这些变化渲染到浏览器端。</p><p>理解了上面这些概念，我们可以开始使用 React 写一些例子了。下面会开发一系列功能，每一个例子都是在前一个例子的基础上进行改进。我们会编写一个类似 instagram 的照片流程序 - 没有比这更好的示例程序了。</p><p>下载所需要的<a href="https://github.com/zhuowenli/react-starter-kit" target="_blank" rel="noopener">开发环境</a>，直接在<code>script.js</code>文件里面开发就可以了。</p><h2 id="渲染-render"><a href="#渲染-render" class="headerlink" title="渲染(render)"></a>渲染(render)</h2><p>第一步是渲染虚拟元素（React 元素或 component）。注意，虚拟元素只存在于内存中，必须显式地告诉 React 将它渲染到浏览器上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'http://zhuowenli.github.io/lib/img/icon.png'</span> /&gt;</span></span>, <span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><p>查看代码：<a href="http://jsbin.com/detime/6/edit" target="_blank" rel="noopener">JSBin</a></p><p><code>render</code> 函数接收两个参数：虚拟元素和真实的浏览器 DOM 元素。React 将虚拟元素插入到指定的 DOM 元素中。上例中可以看到图片被渲染出来了。</p><h2 id="组件-Components"><a href="#组件-Components" class="headerlink" title="组件(Components)"></a>组件(Components)</h2><p>组件是 React 的精髓所在。它们是自定义的 React 元素，通常有一些功能和结构定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'http://zhuowenli.github.io/lib/img/icon.png'</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Photo</span> /&gt;</span></span>, <span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p>查看代码：<a href="http://jsbin.com/detime/7/edit" target="_blank" rel="noopener">JSBin</a></p><p><code>createClass</code> 函数接收一个对象，这个对象实现了 <code>render</code> 方法。</p><p>这个<code>Photo</code>组件定义了 <code>&lt;Photo /&gt;</code>元素，并且渲染到 <code>document.body</code> 里。</p><p>这个组件跟之前的渲染图片没有太大区别，但是它为将来添加自定义功能奠定了基础。</p><h2 id="属性-Props"><a href="#属性-Props" class="headerlink" title="属性(Props)"></a>属性(Props)</h2><p>可以把属性看做组件的配置参数，看起来非常像 HTML 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">'photo'</span>&gt;</span><br><span class="line">                &lt;img src=&#123;<span class="keyword">this</span>.props.imageURL&#125; /&gt;</span><br><span class="line">                &lt;span&gt;&#123;<span class="keyword">this</span>.props.caption&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Photo</span> <span class="attr">imageURL</span>=<span class="string">'http://zhuowenli.github.io/lib/img/icon.png'</span> <span class="attr">caption</span>=<span class="string">'Logo!'</span> /&gt;</span></span>, <span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p>查看代码：<a href="http://jsbin.com/detime/8/edit" target="_blank" rel="noopener">JSBin</a></p><p><code>imageURL</code> 和 <code>caption</code> 两个属性被传递到 <code>Photo</code> 组件内的 <code>render</code> 函数里。</p><p><code>imageURL</code> 被用在 React 图片元素的 <code>src</code> 属性，<code>caption</code> 被用作 React <code>span</code> 元素内的文本。</p><p>组件不会改变它的属性，他们是静止不变的。如果组件里包含动态数据，就要用到状态(State)对象。</p><h2 id="状态-State"><a href="#状态-State" class="headerlink" title="状态(State)"></a>状态(State)</h2><p>状态对象用来记录随时可能变化的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</span><br><span class="line">    toggleLiked: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            liked: !<span class="keyword">this</span>.state.liked</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            liked: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> buttonClass = <span class="keyword">this</span>.state.liked ? <span class="string">'active'</span> : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">'photo'</span>&gt;</span><br><span class="line">                &lt;img src=&#123;<span class="keyword">this</span>.props.src&#125; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div className=<span class="string">'bar'</span>&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.toggoleLiked&#125; className=&#123;buttonClass&#125;&gt;</span><br><span class="line">                        ♥</span><br><span class="line">                    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;span&gt;&#123;this.props.caption&#125;&lt;/</span>span&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Photo</span> <span class="attr">src</span>=<span class="string">'http://zhuowenli.github.io/lib/img/icon.png'</span> <span class="attr">caption</span>=<span class="string">'Logo!'</span>) /&gt;</span></span>, <span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p>查看代码：<a href="http://jsbin.com/detime/3/edit" target="_blank" rel="noopener">JSBin</a></p><p>组件的状态给组件引入了一些复杂性。</p><p>这个组件有一个新的函数 <code>getInitialState</code>。 当组件初始化时 React 会去调用这个函数。根据它返回的对象来设置组件的初始状态（正如函数名所表达的那样）。</p><p>这个组件还有另一个新函数 <code>toggleLiked</code>。它调用了 <code>setState</code> 来切换 <code>liked</code> 的值。</p><p>在 <code>render</code> 函数里有个 <code>buttonClass</code> 的变量，根据 <code>liked</code> 状态被标记为 <code>&#39;active&#39;</code> 或 空值。</p><p><code>buttonClass</code> 被用作 React <code>button</code> 元素的类名。这个按钮还将 <code>toggleLiked</code> 函数绑定到 <code>onClick</code> 事件上。</p><p>看看在浏览器中渲染出来是什么效果：</p><ul><li>当组件里的按钮被点击时，触发 <code>toggleLiked</code> 函数</li><li><code>liked</code> 状态被改变</li><li>React 重新渲染虚拟 DOM</li><li>新老虚拟 DOM 进行对比</li><li>React 识别出变化的部分并渲染到浏览器</li></ul><p>上例演示了通过点击按钮来改变类名</p><h2 id="组合组件-Composition"><a href="#组合组件-Composition" class="headerlink" title="组合组件(Composition)"></a>组合组件(Composition)</h2><p>将一些小的组件(components)链接起来形成一个大的组合组件。例如 <code>Photo</code> 组件可以用在 <code>PhotoGallery</code> 组件中，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</span><br><span class="line">    toggleLiked: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            liked: !<span class="keyword">this</span>.state.liked</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            liked: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> buttonClass = <span class="keyword">this</span>.state.liked ? <span class="string">'active'</span> : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">'photo'</span>&gt;</span><br><span class="line">                &lt;img src=&#123;<span class="keyword">this</span>.props.src&#125; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div className=<span class="string">'bar'</span>&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="keyword">this</span>.toggleLiked&#125; className=&#123;buttonClass&#125;&gt;</span><br><span class="line">                        ♥</span><br><span class="line">                    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;span&gt;&#123;this.props.caption&#125;&lt;/</span>span&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> PhotoGallery = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> photos = <span class="keyword">this</span>.props.photos.map(<span class="function"><span class="keyword">function</span>(<span class="params">photo</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Photo</span> <span class="attr">src</span>=<span class="string">&#123;photo.url&#125;</span> <span class="attr">caption</span>=<span class="string">&#123;photo.caption&#125;</span> /&gt;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">'photo-gallery'</span>&gt;</span><br><span class="line">                &#123;photos&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var data = [</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        url: 'http://zhuowenli.github.io/lib/img/icon.png',</span></span><br><span class="line"><span class="regexp">        caption: 'Logo!'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        url: 'http://zhuowenli.github.io/lib/img/icon-72.png',</span></span><br><span class="line"><span class="regexp">        caption: 'Small Logo'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        url: 'http://zhuowenli.github.io/lib/img/icon-152.png',</span></span><br><span class="line"><span class="regexp">        caption: 'Large Logo'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">React.render(&lt;PhotoGallery photos=&#123;data&#125; /</span>&gt;, <span class="built_in">document</span>.body);</span><br></pre></td></tr></table></figure><p>查看代码：<a href="http://jsbin.com/detime/10/edit" target="_blank" rel="noopener">JSBin</a></p><p><code>Photo</code> 组件跟之前的没什么两样。新组件 <code>PhotoGallery</code> 根据 3 条假数据生成了 3 个 <code>Photo</code> 组件。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文只是一篇 React 入门，我强烈推荐大家去读 <a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="noopener">React 官方文档</a>，里面包含了所有你想要的细节。</p><p>如果本文有什么错误之处，欢迎在下方评论，或者给我提 pull request。尽情给我发邮件吧，我很乐意效劳。</p><p>P.S - 如果你准备开发一个更复杂的 React 应用，推荐阅读 <a href="/frontend/the-flux-quick-start-guide.html">Flux 入门教程</a>。</p><style type="text/css">    .atom { position: relative; width: 200px; height: 200px; margin: 100px auto -50px;}    .oval { width: 200px; height: 75px; border: 5px solid #61DAFB; border-radius: 50%; }    .oval-forward { -moz-transform: rotate(65deg); -ms-transform: rotate(65deg); -webkit-transform: rotate(65deg); transform: rotate(65deg); }    .oval-backward { margin-top: -75px; -moz-transform: rotate(-65deg); -ms-transform: rotate(-65deg); -webkit-transform: rotate(-65deg); transform: rotate(-65deg); }    .oval-horizontal { margin-top: -75px; }    .circle { width: 40px; height: 40px; background: #61DAFB; border-radius: 40px; position: absolute; top: 19px; left: 80px; -moz-animation: pulse 2s ease-in-out infinite; -ms-animation: pulse 2s ease-in-out infinite; -webkit-animation: pulse 2s ease-in-out infinite; animation: pulse 2s ease-in-out infinite; }</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章将概括性的介绍一下如何用 ReactJS 进行开发。我将介绍一些基础知识，不会有过于深入的分析。你可以结合这些&lt;a href=&quot;https://github.com/zhuowenli/react-starter-kit&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码&lt;/a&gt;阅读本文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="react" scheme="https://www.zhuowenli.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>数组去重的几个方法</title>
    <link href="https://www.zhuowenli.com/frontend/array-unique.html"/>
    <id>https://www.zhuowenli.com/frontend/array-unique.html</id>
    <published>2015-03-13T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.592Z</updated>
    
    <content type="html"><![CDATA[<p>最近前端面试遇到的的一个问题：怎样去掉Javascript的Array的重复项，并且实现排序。这个问题看起来简单，但是其实暗藏杀机。 考的不仅仅是实现这个功能，更能看出你对JS代码的深入理解。</p><p>这几天想了一些方法，可以实现这个目的。</p><a id="more"></a><p>首先实现一个排序的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> seq = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现数组去重并排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 判断有没有在数组里面，没有就填充进去</span></span><br><span class="line">        <span class="keyword">if</span> (n.indexOf(<span class="keyword">this</span>[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">            n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> n.sort(seq); <span class="comment">// 最后进行一次排序</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = &#123;&#125;,</span><br><span class="line">        r = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 使用哈希表，利用关键字的判断来去重</span></span><br><span class="line">        <span class="comment">// 如果哈希表中没有当前项</span></span><br><span class="line">        <span class="keyword">if</span> (!n[<span class="keyword">this</span>[i]]) &#123;</span><br><span class="line">            n[<span class="keyword">this</span>[i]] = <span class="literal">true</span>;</span><br><span class="line">            r.push(<span class="keyword">this</span>[i]);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> r.sort(seq);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = [<span class="keyword">this</span>[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前数组的第i项在当前数组中第一次出现的位置不是i，</span></span><br><span class="line">    <span class="comment">//那么表示第i项是重复的，忽略掉。否则存入结果数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.indexOf(<span class="keyword">this</span>[i]) == i) &#123;</span><br><span class="line">            n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> n.sort(seq); <span class="comment">// 最后进行一次排序</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique4 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sort(seq); <span class="comment">// 先进行数组排序</span></span><br><span class="line">    <span class="keyword">var</span> n = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果当前项和上一项的值不一样时，则存入结果数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[i] != <span class="keyword">this</span>[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5.</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique5 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用ES5的reduce方法。</span></span><br><span class="line">    <span class="comment">// 参考链接：http://www.zhangxinxu.com/wordpress/2013/04/es5%E6%96%B0%E5%A2%9E%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/#reduce</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.indexOf(b) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            a.push(b);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;, []);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中1、3、5的方法都用到了数组<code>indexOf</code>方法。使用这个方法是为了寻找存入参数在数组中第一次出现的位置。显然，js引擎在调用这个方法的时候会挨个遍历数组直到找到目标为止，所以函数会花掉比较多的时间。</p><p>至于第2种的做法就是把已经出现过的字段，通过关键字的形式存入一个对象内，利用关键字索引要比<code>indexOf</code>遍历数组快得多。</p><p>第4种方法的思路是先把数组排序，然后比较相邻的两个值。这种方法也比第1种和第3种方法快了不少。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近前端面试遇到的的一个问题：怎样去掉Javascript的Array的重复项，并且实现排序。这个问题看起来简单，但是其实暗藏杀机。 考的不仅仅是实现这个功能，更能看出你对JS代码的深入理解。&lt;/p&gt;
&lt;p&gt;这几天想了一些方法，可以实现这个目的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="unique" scheme="https://www.zhuowenli.com/tags/unique/"/>
    
      <category term="array" scheme="https://www.zhuowenli.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>如何创建文字填充动画</title>
    <link href="https://www.zhuowenli.com/frontend/create-animated-text-fills.html"/>
    <id>https://www.zhuowenli.com/frontend/create-animated-text-fills.html</id>
    <published>2015-03-07T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>在CSS3和SVG出现之前，我们脑海里可能会有一些酷炫的想法，因为技术的不支持一直没办法实现。但是，随着技术的发展，这些高大上的想法越来越有实现的可能。例如，我们现在有很多的方式来实现文字填充动画。</p><a id="more"></a><p>大概一年前，<a href="http://sarasoueidan.com/index.html" target="_blank" rel="noopener">Sara Soueidan</a>发表了一篇<a href="http://tympanus.net/codrops/2013/12/02/techniques-for-creating-textured-text/" target="_blank" rel="noopener">Techniques for Creating Textured Text</a>的文章。这篇神奇的文章告诉我们如何使用一些现代web技术、包括canvas等，来实现创建纹理文字的效果。如图：</p><p><img src="https://st-qn.gittt.cn/2015/03/07/1.png" alt=""></p><p>看到这个，我们就会想，能不能让里面文字填充的背景动起来？我们可以实现文字的阴影或渐变的动画？或者使用一个视频(<code>video</code>)来填充文本如何？</p><p>这篇文章我将会分享如何创建图案填充的文本动画。当然，最好还要保留文本的文字选择能力，用于复制、粘贴等。</p><p>因为是<strong>高度实验性</strong>的代码，可能有大部分浏览器不支持，为了更好的体验效果请用chrome最新版浏览器来阅读该文章，谢谢。</p><h2 id="方法1：使用background-clip"><a href="#方法1：使用background-clip" class="headerlink" title="方法1：使用background-clip"></a>方法1：使用<code>background-clip</code></h2><p>这个方式可能是我们脑海里第一个蹦出来的想法，虽然只有WebKit内核的浏览器支持，所以要加上<code>-webkit-</code>前缀。</p><p>html标签如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-with-text"</span>&gt;</span></span><br><span class="line">    Text</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS是这样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-with-text</span>&#123;</span><br><span class="line"> <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'img/1.jpg'</span>);</span><br><span class="line"> <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line"> <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="demo"> <div class="box-with-text demo1">     Text </div></div><p>文字依然文本，所以我们可以选择和复制。其缺点是缺乏浏览器的支持。</p><p>但我们可以用CSS渐变与-webkit-前缀以除去非Webkit的浏览器的背景：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-with-text</span>&#123;</span><br><span class="line"> <span class="attribute">background-image</span>:<span class="built_in">-webkit-linear-gradient</span>(transparent, transparent),</span><br><span class="line">        <span class="built_in">url</span>(<span class="string">'img/1.jpg'</span>);</span><br><span class="line"> <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line"> <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不支持的浏览器将完全忽略了整个字符串，我们能够避免完全显示的背景图像。这简单的一招将使我们能够解决非Webkit内核的浏览器，如果我们不希望显示的图像话。</p><p>如果我们要实现填充动画，CSS可以实现。但是我们CSS动画只能实现改变背景的位置和大小，不能平滑地改变颜色。效果如图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// scss</span><br><span class="line"><span class="keyword">@include</span> keyframes(stripes) &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-with-text</span>&#123;</span><br><span class="line"> <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(crimson <span class="number">50%</span>, #FD0 <span class="number">50%</span>);</span><br><span class="line"> <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line"> <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">50px</span>;</span><br><span class="line"> <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line"> <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line"> @include animation(stripes 2s linear infinite);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="demo"> <div class="box-with-text demo2">     Text </div></div><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>使用该技术实现：只支持WebKit内核浏览器，有限的填充文字的动画效果。</p><h2 id="方法2：使用SVG"><a href="#方法2：使用SVG" class="headerlink" title="方法2：使用SVG"></a>方法2：使用SVG</h2><p>SVG是一种奇妙的格式，它具有良好的浏览器支持。在SVG中，我们有三种方式来使文章填充图案：</p><ul><li>fill</li><li>mask</li><li>clip-path</li></ul><p>我将会逐一使用这些方式来展示文字填充图案的效果。</p><p>如果你不了解SVG，建议你阅读<a href="http://www.w3.org/TR/SVG/" target="_blank" rel="noopener">SVG规范</a>，或者其他<a href="https://docs.webplatform.org/wiki/svg/tutorials" target="_blank" rel="noopener">SVG教程</a>等。</p><p>html使用方法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">"0 0 600 300"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">dy</span>=<span class="string">".35em"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  Text</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在它的常规文本中，我们也可以自由的复制粘帖</p><div class="demo"> <svg viewBox="0 0 600 300">  <text text-anchor="middle" x="50%" y="50%" dy=".35em" class="text1">   Text     </text> </svg></div><p>在SVG中添加一个简单的linearGradient标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">"0 0 600 300"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- Gradient --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"gr-simple"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"100%"</span> <span class="attr">y2</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">"hsl(50, 100%, 70%)"</span> <span class="attr">offset</span>=<span class="string">"10%"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">"hsl(320, 100%, 50%)"</span> <span class="attr">offset</span>=<span class="string">"90%"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- text --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">dy</span>=<span class="string">".35em"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  Text</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line"> <span class="attribute">font</span>: <span class="number">12.5em</span>/<span class="number">1</span> Open Sans, Impact;</span><br><span class="line"> <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="built_in">url</span>(#gr-simple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以实现渐变填充的效果：</p><div class="demo"> <svg viewBox="0 0 600 300">  <!-- Gradient -->  <linearGradient id="gr-simple" x1="0" y1="0" x2="100%" y2="100%">   <stop stop-color="hsl(50, 100%, 70%)" offset="10%"/>   <stop stop-color="hsl(320, 100%, 50%)" offset="90%"/>  </linearGradient>  <!-- text -->  <text text-anchor="middle" x="50%" y="50%" dy=".35em" class="text2">   Text     </text> </svg></div><p>想了解更多关于<code>gradients</code>的知识可以阅读<a href="http://www.sitepoint.com/author/jtrythall/" target="_blank" rel="noopener">Joni Trythall</a>的文章<a href="http://www.sitepoint.com/getting-started-svg-gradients/" target="_blank" rel="noopener">Getting Started with SVG Gradients</a></p><p>使用<code>fill</code>来填充颜色的方式也可以直接写在<code>text</code>的属性<code>fill</code>上，要使用<code>gradients</code>是必须定义ID，并且将之插入到<code>url()</code>中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">"0 0 600 300"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">dy</span>=<span class="string">".35em"</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">fill</span>=<span class="string">"url(#gr-simple)"</span>&gt;</span></span><br><span class="line">  Text</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，你喜欢使用css的话也行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="built_in">url</span>(#gr-simple);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以设置<code>gradient</code>的字体颜色，但是我们需要使用SMIL来控制<code>gradient</code>的其他属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Gradient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">"gr-radial"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">cx</span>=<span class="string">"50%"</span> <span class="attr">cy</span>=<span class="string">"50%"</span> <span class="attr">r</span>=<span class="string">"70%"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Animation for radius of gradient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeName</span>=<span class="string">"r"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">values</span>=<span class="string">"0%;150%;100%;0%"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">dur</span>=<span class="string">"5s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Animation for colors of stop-color --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">"#FFF"</span> <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">animate</span> <span class="attr">attributeName</span>=<span class="string">"stop-color"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">values</span>=<span class="string">"#333;#FFF;#FFF;#333"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">dur</span>=<span class="string">"5s"</span> <span class="attr">repeatCount</span>=<span class="string">"indefinite"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">stop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">"rgba(55,55,55,0)"</span> <span class="attr">offset</span>=<span class="string">"100%"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><div class="demo"> <svg viewBox="0 0 600 300" style="background: #000;">  <!-- Gradient -->  <radialGradient id="gr-radial" cx="50%" cy="50%" r="70%" >   <!-- Gradient动画的半径 -->   <animate attributeName="r" values="0%;150%;100%;0%" dur="5s" repeatCount="indefinite" />   <!-- Gradient渐变色彩 -->   <stop stop-color="#FFF" offset="0">    <animate attributeName="stop-color" values="#333;#FFF;#FFF;#333" dur="5s" repeatCount="indefinite" />   </stop>   <stop stop-color="rgba(55,55,55,0)" offset="100%"/>  </radialGradient>  <!-- Text -->  <text text-anchor="middle" x="50%" y="50%" dy=".35em" class="text3" >   Text  </text> </svg></div><p>想了解更多关于SMIL的知识可以阅读Sara Soueidan的文章<a href="http://css-tricks.com/guide-svg-animations-smil/" target="_blank" rel="noopener">A Guide to SVG Animations (SMIL)</a></p><p>现在我们来使用<code>&lt;pattern&gt;</code>试试。</p><div class="demo"> <svg viewBox="0 0 600 300" class="demo3">  <pattern id="p-spots" viewBox="0 0 80 80" patternUnits="userSpaceOnUse" width="60" height="60" x="5" y="5" >   <g class="g-spots">    <circle r="5" cx="10" cy="10"/>    <circle r="7" cx="30" cy="30"/>    <circle r="5" cx="50" cy="10"/>    <circle r="9" cx="70" cy="30"/>    <circle r="11" cx="50" cy="50"/>    <circle r="5" cx="10" cy="50"/>    <circle r="7" cx="30" cy="70"/>    <circle r="9" cx="70" cy="70"/>   </g>  </pattern>  <!-- Text -->  <text text-anchor="middle" x="50%" y="50%" dy=".35em" class="text" >   Text  </text> </svg></div><p><code>&lt;pattern&gt;</code>标签的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">"p-spots"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 80 80"</span> <span class="attr">patternUnits</span>=<span class="string">"userSpaceOnUse"</span> <span class="attr">width</span>=<span class="string">"60"</span> <span class="attr">height</span>=<span class="string">"60"</span> <span class="attr">x</span>=<span class="string">"5"</span> <span class="attr">y</span>=<span class="string">"5"</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">g</span> <span class="attr">class</span>=<span class="string">"g-spots"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"5"</span> <span class="attr">cx</span>=<span class="string">"10"</span> <span class="attr">cy</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"7"</span> <span class="attr">cx</span>=<span class="string">"30"</span> <span class="attr">cy</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"5"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"9"</span> <span class="attr">cx</span>=<span class="string">"70"</span> <span class="attr">cy</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"11"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"5"</span> <span class="attr">cx</span>=<span class="string">"10"</span> <span class="attr">cy</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"7"</span> <span class="attr">cx</span>=<span class="string">"30"</span> <span class="attr">cy</span>=<span class="string">"70"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"9"</span> <span class="attr">cx</span>=<span class="string">"70"</span> <span class="attr">cy</span>=<span class="string">"70"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里仅定义了圆的大小和位置，样式需要在css中定义。或者使用sass：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scss</span></span><br><span class="line"><span class="variable">$colors</span>: <span class="number">#1D4259</span>, <span class="number">#0A7373</span>, <span class="number">#30BF7C</span>, <span class="number">#BAF266</span>, <span class="number">#EEF272</span>;</span><br><span class="line"><span class="variable">$max</span>: length(<span class="variable">$colors</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-spots</span> circle &#123;</span><br><span class="line"> <span class="keyword">@for</span> <span class="variable">$item</span> from <span class="number">1</span> through <span class="variable">$max</span> &#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child</span>(#&#123;<span class="variable">$max</span>&#125;n + #&#123;<span class="variable">$item</span>&#125;)&#123;</span><br><span class="line">   fill: nth(<span class="variable">$colors</span>, <span class="variable">$item</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会生成下面的css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-spots</span> <span class="selector-tag">circle</span><span class="selector-pseudo">:nth-child(5n</span> + 1) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#1D4259</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-spots</span> <span class="selector-tag">circle</span><span class="selector-pseudo">:nth-child(5n</span> + 2) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#0A7373</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-spots</span> <span class="selector-tag">circle</span><span class="selector-pseudo">:nth-child(5n</span> + 3) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#30BF7C</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-spots</span> <span class="selector-tag">circle</span><span class="selector-pseudo">:nth-child(5n</span> + 4) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#BAF266</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-spots</span> <span class="selector-tag">circle</span><span class="selector-pseudo">:nth-child(5n</span> + 5) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#EEF272</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想了解更多有关于SVG patterns的，可以阅读<a href="https://developer.mozilla.org/zh-TW/docs/Web/SVG/Tutorial/%E5%9B%BE%E6%A1%88" target="_blank" rel="noopener">MDN-SVG教程</a>相关文章。</p><p>我是使用sass来做css的预编译的，所以可以很方便的指定动画的延时。代码如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scss</span></span><br><span class="line"><span class="variable">$colors</span>: <span class="number">#551F7A</span>, <span class="number">#BA2799</span>, <span class="number">#D9587A</span>, <span class="number">#FFDD00</span>, <span class="number">#FFF3A1</span>;</span><br><span class="line"><span class="variable">$max</span>: length(<span class="variable">$colors</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$time</span>: <span class="number">2s</span>;</span><br><span class="line"><span class="variable">$time-step</span>: <span class="variable">$time</span>/<span class="variable">$max</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-stars</span> polygon &#123;</span><br><span class="line">  stroke-<span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">animation</span>: stroke <span class="variable">$time</span> infinite;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@for</span> <span class="variable">$item</span> from <span class="number">1</span> through <span class="variable">$max</span> &#123;</span><br><span class="line">    &amp;<span class="selector-pseudo">:nth-child</span>(#&#123;<span class="variable">$max</span>&#125;n + #&#123;<span class="variable">$item</span>&#125;)&#123;</span><br><span class="line">      <span class="variable">$color</span>: nth(<span class="variable">$colors</span>, <span class="variable">$item</span>);</span><br><span class="line">      fill: <span class="variable">$color</span>;</span><br><span class="line">      stroke: <span class="variable">$color</span>;</span><br><span class="line">      <span class="attribute">animation-delay</span>: -(<span class="variable">$time-step</span>*<span class="variable">$item</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> stroke &#123;</span><br><span class="line"> 50% &#123;</span><br><span class="line">  stroke-<span class="attribute">width</span>: <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// 编译后的css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// css</span><br><span class="line"><span class="selector-class">.g-stars</span> <span class="selector-tag">polygon</span> &#123;</span><br><span class="line"> <span class="attribute">stroke-width</span>: <span class="number">0</span>;</span><br><span class="line"> <span class="attribute">animation</span>: stroke <span class="number">2s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-stars</span> <span class="selector-tag">polygon</span><span class="selector-pseudo">:nth-child(5n</span> + 1) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#551F7A</span>;</span><br><span class="line"> <span class="attribute">stroke</span>: <span class="number">#551F7A</span>;</span><br><span class="line"> <span class="attribute">animation-delay</span>: -<span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-stars</span> <span class="selector-tag">polygon</span><span class="selector-pseudo">:nth-child(5n</span> + 2) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#BA2799</span>;</span><br><span class="line"> <span class="attribute">stroke</span>: <span class="number">#BA2799</span>;</span><br><span class="line"> <span class="attribute">animation-delay</span>: -<span class="number">0.8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.g-stars</span> <span class="selector-tag">polygon</span><span class="selector-pseudo">:nth-child(5n</span> + 3) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#D9587A</span>;</span><br><span class="line"> <span class="attribute">stroke</span>: <span class="number">#D9587A</span>;</span><br><span class="line"> <span class="attribute">animation-delay</span>: -<span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-stars</span> <span class="selector-tag">polygon</span><span class="selector-pseudo">:nth-child(5n</span> + 4) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#FFDD00</span>;</span><br><span class="line"> <span class="attribute">stroke</span>: <span class="number">#FFDD00</span>;</span><br><span class="line"> <span class="attribute">animation-delay</span>: -<span class="number">1.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-stars</span> <span class="selector-tag">polygon</span><span class="selector-pseudo">:nth-child(5n</span> + 5) &#123;</span><br><span class="line"> <span class="attribute">fill</span>: <span class="number">#FFF3A1</span>;</span><br><span class="line"> <span class="attribute">stroke</span>: <span class="number">#FFF3A1</span>;</span><br><span class="line"> <span class="attribute">animation-delay</span>: -<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> stroke &#123;</span><br><span class="line"> 50% &#123;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们把里面的圆圈替换成星星，并且让他放大缩小。</p><div class="demo"> <svg viewBox="0 0 600 300" class="demo4">  <pattern id="p-stars" width="70" height="70" viewBox="0 0 120 120" patternUnits="userSpaceOnUse" >   <g class="g-stars">    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549 " transform="scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(30,30) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(90,30) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(0,60) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(60,0) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(60,60) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(90,90) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(30,90) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(120,60) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(60,120) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(0,120) scale(.9,.9)"></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(-30,90) scale(.9,.9)"></polygon>    <!-- Hack to make shapes full  -->    <polygon></polygon>    <polygon></polygon>    <polygon></polygon>    <polygon points="15 22.5 6.18322122 27.1352549 7.86707613 17.3176275 0.734152256 10.3647451 10.5916106 8.93237254 15 0 19.4083894 8.93237254 29.2658477 10.3647451 22.1329239 17.3176275 23.8167788 27.1352549" transform="translate(120,0) scale(.9,.9)"></polygon>   </g>  </pattern>  <!-- Text -->  <text text-anchor="middle" x="50%" y="50%" dy=".35em" class="text" >   Text  </text> </svg></div><p>因为代码比较长，就不放出了，大家可以自己审查元素来查看。</p><p>当然我们也可以使用gif动画，虽然体积会比较庞大，但是可以创建出很好的效果。</p><div class="demo"> <svg viewBox="0 0 600 300" class="demo5">  <!-- Pattern -->  <pattern  id="p-fire"  viewBox="30 100 186 200" patternUnits="userSpaceOnUse" width="216" height="200" x="-70" y="35">   <!-- Fire -->   <image xlink:href="https://st-qn.gittt.cn/2015/03/07/fire.gif" width="256" height="300"/>  </pattern>  <!-- Text -->  <text text-anchor="middle" x="50%" y="50%" dy=".35em" class="text" >   Text  </text> </svg></div><p>pattern中用来使用图片的方法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">"p-fire"</span> <span class="attr">viewBox</span>=<span class="string">"30 100 186 200"</span> <span class="attr">patternUnits</span>=<span class="string">"userSpaceOnUse"</span> <span class="attr">width</span>=<span class="string">"216"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">x</span>=<span class="string">"-70"</span> <span class="attr">y</span>=<span class="string">"35"</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">image</span> <span class="attr">xlink:href</span>=<span class="string">"/img/post/AnimateTextFills/fire.gif"</span> <span class="attr">width</span>=<span class="string">"256"</span> <span class="attr">height</span>=<span class="string">"300"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不同于<code>background-clip</code>，文本文字将正确的显示在最新的浏览器。</p><p>接下来我们来谈谈<code>stroke</code>，对于html来说，我们可以使用<code>text-shadow</code>的方式来模拟一个类<code>stroke</code>，但是这种方式很大的局限性。</p><p><img src="https://st-qn.gittt.cn/2015/03/07/2.png" alt=""></p><p>如图，实现这样的效果可以使用如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-with-text</span> &#123;</span><br><span class="line"> <span class="attribute">text-shadow</span>: -<span class="number">0px</span> -<span class="number">0px</span> <span class="number">0</span> yellowgreen, <span class="number">0px</span> -<span class="number">0px</span> <span class="number">0</span> yellowgreen, <span class="number">0px</span> <span class="number">0px</span> <span class="number">0</span> yellowgreen, -<span class="number">0px</span> <span class="number">0px</span> <span class="number">0</span> yellowgreen, -<span class="number">1px</span> -<span class="number">1px</span> <span class="number">0</span> yellowgreen, <span class="number">1px</span> -<span class="number">1px</span> <span class="number">0</span> yellowgreen, <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> yellowgreen, -<span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> yellowgreen, -<span class="number">2px</span> -<span class="number">2px</span> <span class="number">0</span> yellowgreen, <span class="number">2px</span> -<span class="number">2px</span> <span class="number">0</span> yellowgreen, <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> yellowgreen, -<span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> yellowgreen, <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line"> <span class="attribute">font</span>: <span class="number">26vmax</span>/.<span class="number">85</span> Open Sans, Impact;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用text-shadow实现起来确实非常的繁琐，而且代码相当的臃肿。</p><p>不同于HTML，<code>stroke</code>是可用于SVG的所有元素，包括文本。并且除了作为线条它们也可填充渐变和图案。</p><div class="demo"> <svg viewBox="0 0 600 300" class="demo6">  <symbol id="s-text">   <text text-anchor="middle" x="50%" y="50%" dy=".35em">    Text   </text>  </symbol>  <use xlink:href="#s-text" class="text"></use>  <use xlink:href="#s-text" class="text"></use>  <use xlink:href="#s-text" class="text"></use>  <use xlink:href="#s-text" class="text"></use>  <use xlink:href="#s-text" class="text"></use> </svg></div><p>对于这种类型的<code>stroke</code>，我们需要把许多颜色置入到文本中，可以使用下面的方法来实现。。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">svg</span> <span class="attr">viewBox</span>=<span class="string">"0 0 600 300"</span> <span class="attr">class</span>=<span class="string">"demo6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">"s-text"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">text</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">x</span>=<span class="string">"50%"</span> <span class="attr">y</span>=<span class="string">"50%"</span> <span class="attr">dy</span>=<span class="string">".35em"</span>&gt;</span></span><br><span class="line">    Text</span><br><span class="line">   <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 复制多个文本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#s-text"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#s-text"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#s-text"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#s-text"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#s-text"</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用样式控制颜色和动画</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span>: <span class="number">#551F7A</span>, <span class="number">#BA2799</span>, <span class="number">#D9587A</span>, <span class="number">#FFDD00</span>, <span class="number">#FFF3A1</span>;</span><br><span class="line"><span class="variable">$max</span>: length(<span class="variable">$colors</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@include</span> keyframes(stroke2) &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    stroke-dashoffset: -<span class="number">400</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//scss</span></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line"> fill: none;</span><br><span class="line"> stroke-<span class="attribute">width</span>: <span class="number">6</span>;</span><br><span class="line"> stroke-linejoin: round;</span><br><span class="line"> stroke-dasharray: <span class="number">70</span> <span class="number">330</span>;</span><br><span class="line"> stroke-dashoffset: <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">@include</span> animation(stroke2 <span class="number">6s</span> infinite linear);</span><br><span class="line"> <span class="keyword">@for</span> <span class="variable">$item</span> from <span class="number">1</span> through <span class="variable">$max</span> &#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:nth-child</span>(#&#123;<span class="variable">$max</span>&#125;n + #&#123;<span class="variable">$item</span>&#125;)&#123;</span><br><span class="line">   <span class="variable">$color</span>: nth(<span class="variable">$colors</span>, <span class="variable">$item</span>);</span><br><span class="line">   stroke: <span class="variable">$color</span>;</span><br><span class="line">   <span class="keyword">@include</span> animation-delay(#&#123;-(1<span class="selector-class">.2</span> * <span class="variable">$item</span>)&#125;s);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出来的css就是这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">fill</span>: none;</span><br><span class="line">  <span class="attribute">stroke-width</span>: <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">stroke-linejoin</span>: round;</span><br><span class="line">  <span class="attribute">stroke-dasharray</span>: <span class="number">70</span> <span class="number">330</span>;</span><br><span class="line">  <span class="attribute">stroke-dashoffset</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">animation</span>: stroke2 <span class="number">6s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:nth-child(5n</span> + 1) &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: <span class="number">#551F7A</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:nth-child(5n</span> + 2) &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: <span class="number">#BA2799</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">2.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:nth-child(5n</span> + 3) &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: <span class="number">#D9587A</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">3.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:nth-child(5n</span> + 4) &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: <span class="number">#FFDD00</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">4.8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span><span class="selector-pseudo">:nth-child(5n</span> + 5) &#123;</span><br><span class="line">  <span class="attribute">stroke</span>: <span class="number">#FFF3A1</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: -<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> stroke &#123;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">stroke-dashoffset</span>: -<span class="number">400</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于每一个<code>stroke</code>，我们单独设置一个动画延时，所有他们的路径就不会积聚在同一个地方，而是通过在一个字母上不同的位置循环。</p><h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>使用这种方法的文本可以使用CSS样式。我们也可以选择和复制的文本。另一大优势是，SVG具有非常好的浏览器的支持。因此，创建这类文本，SVG是最好的人选之一。</p><hr><p>未完待续……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在CSS3和SVG出现之前，我们脑海里可能会有一些酷炫的想法，因为技术的不支持一直没办法实现。但是，随着技术的发展，这些高大上的想法越来越有实现的可能。例如，我们现在有很多的方式来实现文字填充动画。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="css3" scheme="https://www.zhuowenli.com/tags/css3/"/>
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="svg" scheme="https://www.zhuowenli.com/tags/svg/"/>
    
      <category term="animation" scheme="https://www.zhuowenli.com/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>sublime前端必备插件</title>
    <link href="https://www.zhuowenli.com/diary/sublime-plugin.html"/>
    <id>https://www.zhuowenli.com/diary/sublime-plugin.html</id>
    <published>2015-03-06T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>代码编辑器或者文本编辑器，对于程序员来说，就像剑与战士一样，谁都想拥有一把可以随心驾驭且锋利无比的宝剑，而每一位程序员，同样会去追求最适合自己的强大、灵活的编辑器，相信你和我一样，都不会例外。</p><a id="more"></a><p>不得不说，sublime简直是前端开发人员日常居家旅行杀人放火的必备神器。小巧绿色且速度非常快，跨平台支持Win/Mac/Linux，支持32与64位，支持各种流行编程语言的语法高亮、代码补全等，而且有着很多其他编辑器没有的超酷的特性，让它的好用达到了前所未有的程度。</p><p>sublime不是免费的，但可以永久免费使用，只是在保存的时候，偶尔会弹出要你购买注册的对话框，仅此而已。</p><h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><h4 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a>Package Control</h4><p>功能：安装包管理</p><p>简介：sublime插件控制台，提供添加、删除、禁用、查找插件等功能</p><p>使用：<a href="https://sublime.wbond.net/installation" target="_blank" rel="noopener">https://sublime.wbond.net/installation</a></p><p>安装方法：</p><p><code>CTRL+`</code> ，出现控制台<br>粘贴以下代码至控制台</p><p>ST2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os; pf&#x3D;&#39;Package Control.sublime-package&#39;; ipp &#x3D; sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http:&#x2F;&#x2F;sublime.wbond.net&#x2F;&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)</span><br></pre></td></tr></table></figure><p>ST3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf &#x3D; &#39;Package Control.sublime-package&#39;; ipp &#x3D; sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http:&#x2F;&#x2F;sublime.wbond.net&#x2F;&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</span><br></pre></td></tr></table></figure><p>其他方法：</p><p>如果以上方法不能安装，请使用下面的方法</p><ol><li>选择菜单：Preferences &gt; Browse Packages</li><li>打开sublime插件安装包文件夹</li><li>下载文件并复制到打开的文件夹</li><li>重启sublime</li></ol><h4 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h4><p>功能：编码快捷键，前端必备</p><p>简介：Emmet作为zen coding的升级版，对于前端来说，可是必备插件，如果你对它还不太熟悉，可以在其官网（<a href="http://docs.emmet.io/" target="_blank" rel="noopener">http://docs.emmet.io/</a>）上看下具体的演示视频。</p><p>使用：教程-<a href="http://docs.emmet.io/cheat-sheet/" target="_blank" rel="noopener">http://docs.emmet.io/cheat-sheet/</a>、<a href="http://peters-playground.com/Emmet-Css-Snippets-for-Sublime-Text-2/" target="_blank" rel="noopener">http://peters-playground.com/Emmet-Css-Snippets-for-Sublime-Text-2/</a></p><p><img src="https://st-qn.gittt.cn/2015/03/06/1.gif" alt=""></p><h4 id="JSFormat"><a href="#JSFormat" class="headerlink" title="JSFormat"></a>JSFormat</h4><p>功能：Javascript的代码格式化插件</p><p>简介：很多网站的JS代码都进行了压缩，一行式的甚至混淆压缩，这让我们看起来很吃力。而这个插件能帮我们把原始代码进行格式的整理，包括换行和缩进等等，是代码一目了然，更快读懂~</p><p>使用：在已压缩的JS文件中，右键选择jsFormat或者使用默认快捷键（<code>Ctrl+Alt+F</code>）</p><p><img src="https://st-qn.gittt.cn/2015/03/06/2.gif" alt=""></p><h4 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h4><p>功能：<code>=</code>号对齐</p><p>简介：变量定义太多，长短不一，可一键对齐</p><p>使用：默认快捷键<code>Ctrl+Alt+A</code>和QQ截屏冲突，可设置其他快捷键如：<code>Ctrl+Shift+Alt+A</code>；先选择要对齐的文本</p><p><img src="https://st-qn.gittt.cn/2015/03/06/3.gif" alt=""></p><h4 id="Clipboard-History"><a href="#Clipboard-History" class="headerlink" title="Clipboard History"></a>Clipboard History</h4><p>功能：粘贴板历史记录</p><p>简介：方便使用复制/剪切的内容</p><p>使用：</p><ul><li><code>Ctrl+alt+v</code>：显示历史记录</li><li><code>Ctrl+alt+d</code>：清空历史记录</li><li><code>Ctrl+shift+v</code>：粘贴上一条记录（最旧）</li><li><code>Ctrl+shift+alt+v</code>：粘贴下一条记录（最新）</li></ul><p><img src="https://st-qn.gittt.cn/2015/03/06/4.gif" alt=""></p><h4 id="Bracket-Highlighter"><a href="#Bracket-Highlighter" class="headerlink" title="Bracket Highlighter"></a>Bracket Highlighter</h4><p>功能：代码匹配</p><p>简介：可匹配<code>[]</code>, <code>()</code>, <code>{}</code>, <code>“”</code>, <code>”</code>, <code>&lt;tag&gt;&lt;/tag&gt;</code>，高亮标记，便于查看起始和结束标记</p><p>使用：点击对应代码即可</p><p><img src="https://st-qn.gittt.cn/2015/03/06/5.gif" alt=""></p><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><p>功能：jQ函数提示</p><p>简介：快捷输入jQ函数，是偷懒的好方法</p><p><img src="https://st-qn.gittt.cn/2015/03/06/6.gif" alt=""></p><h4 id="Doc​Blockr"><a href="#Doc​Blockr" class="headerlink" title="Doc​Blockr"></a>Doc​Blockr</h4><p>功能：生成优美注释</p><p>简介：标准的注释，包括函数名、参数、返回值等，并以多行显示，手动写比较麻烦</p><p>使用：输入<code>/*</code>、<code>/**</code>然后回车，还有很多用法，请参照</p><p><a href="https://sublime.wbond.net/packages/DocBlockr" target="_blank" rel="noopener">https://sublime.wbond.net/packages/DocBlockr</a></p><p><img src="https://st-qn.gittt.cn/2015/03/06/7.gif" alt=""></p><h4 id="ConvertToUTF8"><a href="#ConvertToUTF8" class="headerlink" title="ConvertToUTF8"></a>ConvertToUTF8</h4><p>功能：文件转码成utf-8</p><p>简介：通过本插件，您可以编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的 GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。ConvertToUTF8 同时支持 Sublime Text 2 和 3。</p><p>使用：安装插件后自动转换为utf-8格式</p><p><img src="https://st-qn.gittt.cn/2015/03/06/8.gif" alt=""></p><h4 id="AutoFileName"><a href="#AutoFileName" class="headerlink" title="AutoFileName"></a>AutoFileName</h4><p>功能：快捷输入文件名</p><p>简介：自动完成文件名的输入，如图片选取</p><p>使用：输入<code>/</code>即可看到相对于本项目文件夹的其他文件</p><p><img src="https://st-qn.gittt.cn/2015/03/06/9.gif" alt=""></p><h4 id="IMESupport"><a href="#IMESupport" class="headerlink" title="IMESupport"></a>IMESupport</h4><p>功能：sublime中文输入法</p><p>简介：还在纠结 Sublime Text 中文输入法不能跟随光标吗？试试「IMESupport 」这个插件吧！目前只支持 Windows，在搜索等界面不能很好的跟随光标。</p><p>使用：<code>Ctrl + Shift + P</code> → 输入pci → 输入IMESupport → 回车</p><p><img src="https://st-qn.gittt.cn/2015/03/06/10.gif" alt=""></p><h4 id="Trailing-spaces"><a href="#Trailing-spaces" class="headerlink" title="Trailing spaces"></a>Trailing spaces</h4><p>功能：检测并一键去除代码中多余的空格</p><p>简介：还在纠结代码中有多余的空格而显得代码不规范？或是有处女座情节？次插件帮你实现发现多余空格、一键删除空格、保存时自动删除多余空格，让你的代码规范清爽起来</p><p>使用：安装插件并重启，即可自动提示多余空格。一键删除多余空格：<code>CTRL+SHITF+T</code>（需配置），更多配置请点击标题。快捷键配置：在Preferences / Key Bindings – User加上代码（数组内）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; "keys": ["ctrl+shift+t"], "command": "delete_trailing_spaces" &#125;</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/03/06/11.gif" alt=""></p><h4 id="GBK-Encoding-Support"><a href="#GBK-Encoding-Support" class="headerlink" title="GBK Encoding Support"></a>GBK Encoding Support</h4><p>功能：中文识别</p><p>简介：Sublime Text 2可识别UTF-8格式的中文，不识别GBK和ANSI，因此打开很多含中文的文档都会出现乱码。可以通过安装插件GBK Support,来识别GBK和ANSI。</p><p>使用：</p><ul><li>Open a GBK File</li><li>Save file with GBK encoding</li><li>Change file encoding from utf8 to GBK or GBK to utf8</li></ul><p><img src="https://st-qn.gittt.cn/2015/03/06/12.jpg" alt=""></p><h4 id="CSSREM"><a href="#CSSREM" class="headerlink" title="CSSREM"></a>CSSREM</h4><p>功能：px值转rem</p><p>简介：一个CSS的px值转rem值的Sublime Text 3自动完成插件。</p><p>使用：</p><p>参数配置文件：Sublime Text -&gt; Preferences -&gt; Package Settings -&gt; cssrem</p><ul><li><code>px_to_rem</code> - px转rem的单位比例，默认为40。</li><li><code>max_rem_fraction_length</code> - px转rem的小数部分的最大长度。默认为6。</li><li><code>available_file_types</code> - 启用此插件的文件类型。默认为：[“.css”, “.less”, “.sass”]。</li></ul><p><a href="https://github.com/flashlizi/cssrem" target="_blank" rel="noopener">https://github.com/flashlizi/cssrem</a></p><p><img src="https://st-qn.gittt.cn/2015/03/06/13.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码编辑器或者文本编辑器，对于程序员来说，就像剑与战士一样，谁都想拥有一把可以随心驾驭且锋利无比的宝剑，而每一位程序员，同样会去追求最适合自己的强大、灵活的编辑器，相信你和我一样，都不会例外。&lt;/p&gt;
    
    </summary>
    
    
      <category term="diary" scheme="https://www.zhuowenli.com/categories/diary/"/>
    
    
      <category term="plugin" scheme="https://www.zhuowenli.com/tags/plugin/"/>
    
      <category term="sublime" scheme="https://www.zhuowenli.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>PhoneGap入门教程(6) - 设备信息和系统提示</title>
    <link href="https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-6.html"/>
    <id>https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-6.html</id>
    <published>2015-02-10T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>PhoneGap可以获取设备的相关信息。并且，在事件处理和其他操作中，会经常用到的基本操作就是使用系统提示，例如警告框、提示框、震动、蜂鸣等。</p><a id="more"></a><h2 id="获取设备的基本信息"><a href="#获取设备的基本信息" class="headerlink" title="获取设备的基本信息"></a>获取设备的基本信息</h2><p>设备信息插件的完全限定名是<code>org.apache.cordova.device</code>，可以使用下列命令进行安装</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add org.apache.cordova.device</span><br></pre></td></tr></table></figure><p>一旦安装了插件，就可以使用该插件公开的几个属性。这几个属性使用<code>window.device</code>对象可以访问，这些属性包含了设备硬件信息和软件相关信息：</p><ul><li><p><code>device.cordova</code>： 获取Cordova版本号</p></li><li><p><code>device.platform</code>： 获取设备的操作系统名称。例如”Android”、”BlackBerry 10”、”iOS”、”WinCE”、”Tizen”等。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   - "Android"</span></span><br><span class="line"><span class="comment">//   - "BlackBerry 10"</span></span><br><span class="line"><span class="comment">//   - Browser:         returns "MacIntel" on Mac</span></span><br><span class="line"><span class="comment">//                      returns "Win32" on Windows</span></span><br><span class="line"><span class="comment">//   - "iOS"</span></span><br><span class="line"><span class="comment">//   - "WinCE"</span></span><br><span class="line"><span class="comment">//   - "Tizen"</span></span><br><span class="line"><span class="keyword">var</span> devicePlatform = device.platform;</span><br></pre></td></tr></table></figure></li><li><p><code>device.uuid</code>：    获取设备的通用唯一识别码 (Universally Unique Identifier)</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android: Returns a random 64-bit integer (as a string, again!)</span></span><br><span class="line"><span class="comment">//          The integer is generated on the device's first boot</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// BlackBerry: Returns the PIN number of the device</span></span><br><span class="line"><span class="comment">//             This is a nine-digit unique integer (as a string, though!)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// iPhone: (Paraphrased from the UIDevice Class documentation)</span></span><br><span class="line"><span class="comment">//         Returns a string of hash values created from multiple hardware identifies.</span></span><br><span class="line"><span class="comment">//         It is guaranteed to be unique for every device and can't be tied</span></span><br><span class="line"><span class="comment">//         to the user account.</span></span><br><span class="line"><span class="comment">// Windows Phone 7 : Returns a hash of device+current user,</span></span><br><span class="line"><span class="comment">// if the user is not defined, a guid is generated and will persist until the app is uninstalled</span></span><br><span class="line"><span class="comment">// Tizen: returns the device IMEI (International Mobile Equipment Identity or IMEI is a number</span></span><br><span class="line"><span class="comment">// unique to every GSM and UMTS mobile phone.</span></span><br><span class="line"><span class="keyword">var</span> deviceID = device.uuid;</span><br></pre></td></tr></table></figure></li><li><p><code>device.version</code>： 返回操作系统版本号</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android:    Froyo OS would return "2.2"</span></span><br><span class="line"><span class="comment">//             Eclair OS would return "2.1", "2.0.1", or "2.0"</span></span><br><span class="line"><span class="comment">//             Version can also return update level "2.1-update1"</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// BlackBerry: Torch 9800 using OS 6.0 would return "6.0.0.600"</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Browser:    Returns version number for the browser</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// iPhone:     iOS 3.2 returns "3.2"</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Windows Phone 7: returns current OS version number, ex. on Mango returns 7.10.7720</span></span><br><span class="line"><span class="comment">// Tizen: returns "TIZEN_20120425_2"</span></span><br><span class="line"><span class="keyword">var</span> deviceVersion = device.version;</span><br></pre></td></tr></table></figure></li><li><p><code>device.model</code>：   返回设备的型号名称，其内容一般上是设备生产商所设。即使是同一款产品，如果其系统版本号不同，返回的<code>device.name</code>的内容也可能不一样。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android:    Nexus One       returns "Passion" (Nexus One code name)</span></span><br><span class="line"><span class="comment">//             Motorola Droid  returns "voles"</span></span><br><span class="line"><span class="comment">// BlackBerry: Torch 9800      returns "9800"</span></span><br><span class="line"><span class="comment">// Browser:    Google Chrome   returns "Chrome"</span></span><br><span class="line"><span class="comment">//             Safari          returns "Safari"</span></span><br><span class="line"><span class="comment">// iOS:     for the iPad Mini, returns iPad2,5; iPhone 5 is iPhone 5,1. See http://theiphonewiki.com/wiki/index.php?title=Models</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> model = device.model;</span><br></pre></td></tr></table></figure></li></ul><h2 id="系统消息提示对话框"><a href="#系统消息提示对话框" class="headerlink" title="系统消息提示对话框"></a>系统消息提示对话框</h2><p>系统消息提示对话框插件的完全限定名是<code>org.apache.cordova.dialogs</code>，可以使用下列命令进行安装</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add org.apache.cordova.dialogs</span><br></pre></td></tr></table></figure><p>一旦安装了插件，就可以使用该插件公开的几个方法，他们都可以使用<code>window.navigator</code>对象访问。</p><ul><li><code>navigator.notification.alert()</code>： 弹出对话框</li><li><code>navigator.notification.confirm()</code>： 弹出确认对话框</li><li><code>navigator.notification.prompt()</code>： 提示输入消息对话框</li></ul><p>这几个方法与JavaScript内建的同名方法有些不同，它们调用的是系统内置的对话框。</p><h3 id="提示警告框"><a href="#提示警告框" class="headerlink" title="提示警告框"></a>提示警告框</h3><p><code>notification.alert()</code>方法弹出一个可以定制的警告或者对话窗口，语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.notification.alert(message, alertCallback, [title], [buttonName])</span><br></pre></td></tr></table></figure><ul><li><p><code>message</code>: 对话框信息. (String)</p></li><li><p><code>alertCallback</code>: 定义当警告对话框关闭的时候被调用的回调函数. (Function)</p></li><li><p><code>title</code>: 对话框标题. (String) (可选, 默认为<code>Alert</code>)</p></li><li><p><code>buttonName</code>: 按钮标签. (String) (可选, 默认为<code>OK</code>)</p></li></ul><p>事例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertDismissed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">navigator.notification.alert(</span><br><span class="line">    <span class="string">'You are the winner!'</span>,  <span class="comment">// message</span></span><br><span class="line">    alertDismissed,         <span class="comment">// callback</span></span><br><span class="line">    <span class="string">'Game Over'</span>,            <span class="comment">// title</span></span><br><span class="line">    <span class="string">'Done'</span>                  <span class="comment">// buttonName</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="确认对话框"><a href="#确认对话框" class="headerlink" title="确认对话框"></a>确认对话框</h3><p><code>notification.confirm()</code>方法弹出一个可以定制的确认对话框，语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.notification.confirm(message, confirmCallback, [title], [buttonLabels])</span><br></pre></td></tr></table></figure><ul><li><p><code>message</code>: 对话框信息. (String)</p></li><li><p><code>confirmCallback</code>: 定义一个回调函数，按下按钮后触发此回调函数。该回调函数的参数为按下按钮的索引，也就是参数<code>buttonLabels</code>所定义的标签顺序。注意索引是从1开始的。 (Function)</p></li><li><p><code>title</code>: 对话框标题. (String) (可选, 默认为<code>Confirm</code>)</p></li><li><p><code>buttonLabels</code>: 定义按钮标签，如果声明多个按钮，那么该参数的值是以逗号为分隔符的字符串，顺序用作按钮标签。Android最多支持3个按钮，并且Android3.0之后序号按相反的顺序排列。 (Array) (可选, 默认为[<code>OK,Cancel</code>])</p></li></ul><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onConfirm</span>(<span class="params">buttonIndex</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'You selected button '</span> + buttonIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">navigator.notification.confirm(</span><br><span class="line">    <span class="string">'You are the winner!'</span>, <span class="comment">// message</span></span><br><span class="line">     onConfirm,            <span class="comment">// callback to invoke with index of button pressed</span></span><br><span class="line">    <span class="string">'Game Over'</span>,           <span class="comment">// title</span></span><br><span class="line">    [<span class="string">'Restart'</span>,<span class="string">'Exit'</span>]     <span class="comment">// buttonLabels</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="提示输入消息对话框"><a href="#提示输入消息对话框" class="headerlink" title="提示输入消息对话框"></a>提示输入消息对话框</h3><p>有时候需要用户输入一些消息来进行判断，而不仅仅是‘是’和‘否’，使用<code>notification.prompt()</code>方法可以实现这个目的。语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.notification.prompt(message, promptCallback, [title], [buttonLabels], [defaultText])</span><br></pre></td></tr></table></figure><ul><li><p><code>message</code>: 对话框信息. (String)</p></li><li><p><code>promptCallback</code>: 定义一个回调函数，按下按钮后触发此回调函数。该回调函数的参数是一个Object对象，其中包含两个属性： (Function)</p><ul><li>属性<code>buttonIndex</code>为按下按钮的索引，也就是参数<code>buttonLabels</code>所定义的标签顺序，注意索引是从1开始的；</li><li>属性<code>input1</code>是输入文本的内容。</li></ul></li><li><p><code>title</code>: 对话框标题. (String) (可选, 默认为<code>Prompt</code>)</p></li><li><p><code>buttonLabels</code>: 定义按钮标签，如果声明多个按钮，那么该参数的值是以逗号为分隔符的字符串，顺序用作按钮标签。Android最多支持3个按钮，并且Android3.0之后序号按相反的顺序排列。 (Array) (可选, 默认为[<code>OK,Cancel</code>])</p></li><li><p><code>defaultText</code>: 在输入框中显示预置的信息。 (String) (可选, 如果不定义，文本框中默认为空白)</p></li></ul><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onPrompt</span>(<span class="params">results</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"You selected button number "</span> + results.buttonIndex + <span class="string">" and entered "</span> + results.input1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">navigator.notification.prompt(</span><br><span class="line">    <span class="string">'Please enter your name'</span>,  <span class="comment">// message</span></span><br><span class="line">    onPrompt,                  <span class="comment">// callback to invoke</span></span><br><span class="line">    <span class="string">'Registration'</span>,            <span class="comment">// title</span></span><br><span class="line">    [<span class="string">'Ok'</span>,<span class="string">'Exit'</span>],             <span class="comment">// buttonLabels</span></span><br><span class="line">    <span class="string">'Jane Doe'</span>                 <span class="comment">// defaultText</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="系统震动和蜂鸣提示"><a href="#系统震动和蜂鸣提示" class="headerlink" title="系统震动和蜂鸣提示"></a>系统震动和蜂鸣提示</h2><p>这个插件与<a href="http://www.w3.org/TR/vibration/" target="_blank" rel="noopener">W3C震动规范</a>对齐。</p><p>系统震动和蜂鸣提示插件的完全限定名是<code>org.apache.cordova.vibration</code>，可以使用下列命令进行安装</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add org.apache.cordova.vibration</span><br></pre></td></tr></table></figure><p>一旦安装了插件，就可以使用该插件公开的几个方法，他们都可以使用<code>window.navigator</code>对象访问。</p><ul><li><code>navigator.notification.beep()</code>： 弹出对话框</li><li><code>navigator.notification.vibrate()</code>： 弹出确认对话框</li></ul><h3 id="触发设备蜂鸣"><a href="#触发设备蜂鸣" class="headerlink" title="触发设备蜂鸣"></a>触发设备蜂鸣</h3><p>使用<code>notification.beep()</code>方法可以使设备发出beep声。语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.notification.beep(times);</span><br></pre></td></tr></table></figure><ul><li><code>times</code>: 定义beep声重复的次数. (Number)</li></ul><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Beep twice!</span></span><br><span class="line">navigator.notification.beep(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>Android系统会播放在“Settings/Display &amp; Sound”面板内指定的通知铃声(Notification ringtone).</li><li>iOS将忽略控制发声的次数<br>iOS没有原生的Beep API，PhoneGap通过使用多媒体API播放音频文件来实现播放beep声。因此，用户必须提供一个beep声音频文件，并且此文件的播放时长必须少于30s，该文件位于 www 根目录下，而且只能命名为 beep.wav 。</li><li><strong>PhoneGap最新API把该方法归纳到上面设备基本信息上。</strong></li></ul><h3 id="触发设备震动"><a href="#触发设备震动" class="headerlink" title="触发设备震动"></a>触发设备震动</h3><p>使用<code>navigator.vibrate()</code>方法可以使设备在指定时长震动。语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.vibrate(time)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.vibrate([time])</span><br></pre></td></tr></table></figure><ul><li><code>times</code>: 定义以毫秒为时长来震动设备，1000毫秒为1秒. (Number)</li></ul><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vibrate for 3 seconds</span></span><br><span class="line">navigator.vibrate(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vibrate for 3 seconds</span></span><br><span class="line">navigator.vibrate([<span class="number">3000</span>]);</span><br></pre></td></tr></table></figure><hr><blockquote><p>相关文章:</p><p><a href="/frontend/phonegap-getting-started-tutorial-1.html">PhoneGap入门教程(1) - 环境安装与配置</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-2.html">PhoneGap入门教程(2) - 内核事件和基本用法</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-3.html">PhoneGap入门教程(3) - 原生插件安装和管理</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-4.html">PhoneGap入门教程(4) - 电量变化侦测</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-5.html">PhoneGap入门教程(5) - 程序内置浏览器窗口</a></p><p>PhoneGap入门教程(6) - 设备信息和系统提示</p></blockquote><br><blockquote><p>参考资料：</p><p><a href="https://github.com/apache/cordova-plugin-dialogs/blob/master/doc/index.md" target="_blank" rel="noopener">Apache Cordova Plugin dialogs</a></p><p><a href="https://github.com/apache/cordova-plugin-vibration/blob/master/doc/index.md" target="_blank" rel="noopener">Apache Cordova Plugin vibration</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PhoneGap可以获取设备的相关信息。并且，在事件处理和其他操作中，会经常用到的基本操作就是使用系统提示，例如警告框、提示框、震动、蜂鸣等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="PhoneGap" scheme="https://www.zhuowenli.com/tags/PhoneGap/"/>
    
      <category term="Android" scheme="https://www.zhuowenli.com/tags/Android/"/>
    
      <category term="Webapp" scheme="https://www.zhuowenli.com/tags/Webapp/"/>
    
  </entry>
  
  <entry>
    <title>PhoneGap入门教程(5) - 程序内置浏览器窗口</title>
    <link href="https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-5.html"/>
    <id>https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-5.html</id>
    <published>2015-02-04T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>window.open()</code>方法可以让用户在应用程序内显示一个浏览器窗口，但是PhoneGap重写了这个方法。该方法与BOM（浏览器对象模型）的<code>window.open()</code>方法有很大的不同，其中一个最大的不同是该方法返回了一个<code>InAppBrowser</code>对象，用于引用这个新打开的窗口，从而可以在应用程序内控制这个窗口。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="built_in">window</span>.open(<span class="string">'http://zwlme.com'</span>, <span class="string">'_blank'</span>, <span class="string">'location=yes'</span>);</span><br></pre></td></tr></table></figure><p>这个新打开的窗口是一个<code>InAppBrowser</code>实例，一般称之为InAppBrowser窗口。</p><p><code>InAppBrowser</code>浏览器插件的完全限定名是<code>org.apache.cordova.inappbrowser</code>，可以使用下列命令安装插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add org.apache.cordova.inappbrowser</span><br></pre></td></tr></table></figure><h2 id="打开一个新的窗口"><a href="#打开一个新的窗口" class="headerlink" title="打开一个新的窗口"></a>打开一个新的窗口</h2><p>当然，使用<code>window.open()</code>方法不当会在一个新的<code>InAppBrowser</code>实例中打开一个URL，也可以在当前浏览器或者在系统浏览器中打开一个URL。</p><p>该方法的语法格式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="built_in">window</span>.open(url, target, options);</span><br></pre></td></tr></table></figure><ul><li><p><strong>ref</strong>: 返回的<code>InAppBrowser</code>实例，使用它可以进一步的操作这个窗口</p></li><li><p><strong>url</strong>: 指定要加载的URL地址(String)。如果URL包含Unicode字符，首先使用<code>encodeURI()</code>进行编码。</p></li><li><p><strong>target</strong>: 指定加载的URL到目标位置，这个参数是可选的。默认是<code>_self</code>。</p><ul><li><code>_self</code>: 如果URL在白名单列表中，在Cordova WebView中打开URL，负责在<code>InAppBrowser</code>窗口中打开。</li><li><code>_blank</code>: 在<code>InAppBrowser</code>窗口中打开</li><li><code>_system</code>: 在系统浏览器中打开</li></ul></li><li><p><strong>option</strong>: 参数可选。指定功能项，各功能之间使用逗号隔开，且不能包含空格。默认的值是<code>location=yes</code></p><ul><li><code>location</code>: 用来设置<code>InAppBrowser</code>窗口是否出现地址栏。可选值为<code>yes</code>和<code>no</code>。</li></ul><p>Android还可以设置下列功能项：</p></li><li><p><code>closebuttoncaption</code>: 用来设置Done按钮显示的文字。</p></li><li><p><code>hidden</code>: 如果设置<code>yes</code>，则会先加载网页但是不显示出来。然后可以调用<code>show()</code>方法来显示该网页。虽然加载是不显示的，但加载完成后会触发加载完成事件。默认值为<code>no</code>，表示正常加载和显示。</p></li><li><p><code>clearcache</code>: 如果设为<code>yes</code>，表示将会首先清除Cookies，然后加载网页。默认值为<code>no</code>。</p></li><li><p><code>clearsessioncache</code>: 如果设为<code>yes</code>，表示将会首先清除Session，然后加载网页。默认值为<code>no</code>。</p></li></ul><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用绝对路径</span></span><br><span class="line"><span class="keyword">var</span> ref  = <span class="built_in">window</span>.open(<span class="string">'http://zwlme.com'</span>, <span class="string">'_blank'</span>, <span class="string">'location=yes'</span>);</span><br><span class="line"><span class="comment">// URL存在Unicode字符，因此应该用encodeURI()进行编码</span></span><br><span class="line"><span class="keyword">var</span> ref2 = <span class="built_in">window</span>.open(<span class="built_in">encodeURI</span>(<span class="string">'http://www.baidu.com/s?wd=卓文理'</span>), <span class="string">'_blank'</span>, <span class="string">'location=yes'</span>);</span><br><span class="line"><span class="comment">// 使用相对地址</span></span><br><span class="line"><span class="keyword">var</span> ref  = <span class="built_in">window</span>.open(<span class="string">'next.html'</span>, <span class="string">'_self'</span>);</span><br></pre></td></tr></table></figure><h2 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h2><p>可以使用<code>colse()</code>方法来关闭这个窗口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref.close()</span><br></pre></td></tr></table></figure><p>例如下列代码，可以实现窗口在打开5秒后关闭：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="comment">// 打开一个窗口</span></span><br><span class="line"> <span class="keyword">var</span> ref = <span class="built_in">window</span>.open(<span class="string">'http://zwlme.com'</span>, <span class="string">'_blank'</span>, <span class="string">'location=yes'</span>);</span><br><span class="line"> <span class="comment">// 打开5秒后关闭</span></span><br><span class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ref.close();</span><br><span class="line"> &#125;,<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示隐藏的网页"><a href="#显示隐藏的网页" class="headerlink" title="显示隐藏的网页"></a>显示隐藏的网页</h2><p>打开网页时功能项<code>hidden</code>被设置为<code>yes</code>，则会先加载网页但是不显示出来。要想随后显示可以调用<code>show()</code>方法来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="built_in">window</span>.open(<span class="string">'http://apache.org'</span>, <span class="string">'_blank'</span>, <span class="string">'hidden=yes'</span>);</span><br><span class="line"><span class="comment">// 一段时间后...</span></span><br><span class="line">ref.show();</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>也可以使用<code>addEventListener()</code>和<code>removeEventListener()</code>监控和管理新窗口的事件。共有如下几个事件可以监听：</p><ul><li><strong>loadstart</strong>: 当<code>InAppBrowser</code>窗口开始加载一个URL时触发该事件</li><li><strong>loadstop</strong>:  当<code>InAppBrowser</code>窗口完成加载一个URL时触发该事件</li><li><strong>loaderror</strong>: 当<code>InAppBrowser</code>窗口加载一个URL出错时触发该事件</li><li><strong>exit</strong>:      当<code>InAppBrowser</code>窗口关闭时触发该事件</li></ul><p><code>addEventListener</code>事件处理器包含一个参数，该参数是一个<code>InAppBrowserEvent</code>对象，该对象有如下属性：</p><ul><li><p><strong>type</strong>:    事件名，可以是<code>loadstart</code>, <code>loadstop</code>, <code>loaderror</code>, 或 <code>exit</code>。 <em>(String)</em></p></li><li><p><strong>url</strong>:     加载的URL地址。 <em>(String)</em></p></li><li><p><strong>code</strong>:    返回出错代码，仅适用于<code>loaderror</code>事件。 <em>(Number)</em></p></li><li><p><strong>message</strong>: 返回出错消息，进适用于<code>loaderror</code>事件。 <em>(String)</em></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开一个窗口</span></span><br><span class="line"><span class="keyword">var</span> ref = <span class="built_in">window</span>.open(<span class="string">'http://zwlme.com'</span>, <span class="string">'_blank'</span>, <span class="string">'location=yes'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册loadstart事件监听</span></span><br><span class="line">ref.addEventListener(<span class="string">'loadstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; alert(event.url); &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册loadstop事件监听</span></span><br><span class="line">ref.addEventListener(<span class="string">'loadstop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; alert(event.url); &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册exit事件监听</span></span><br><span class="line">ref.addEventListener(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; alert(event.type); &#125;);</span><br></pre></td></tr></table></figure><h2 id="JavaScript脚本注入"><a href="#JavaScript脚本注入" class="headerlink" title="JavaScript脚本注入"></a>JavaScript脚本注入</h2><p><code>executeScript()</code>方法可以将一个JavaScript代码注入<code>InAppBrowser</code>窗口并执行，语法格式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref.executeScript(details, callback);</span><br></pre></td></tr></table></figure><p>参数<code>ref</code>是返回的<code>InAppBrowser</code>实例，参数<code>details</code>定义要注入的JavaScript代码详细信息，该参数是一个<code>Object</code>，可以定义两个属性，属性要么是<code>file</code>，要么是<code>code</code>。</p><ul><li><strong>file</strong>: 指定一个JavaScript文件地址，这个文件中的代码将会注入到当前<code>InAppBrowser</code>窗口。</li><li><strong>code</strong>: 指定一个JavaScript代码字符串，这段代码将会注入到当前<code>InAppBrowser</code>窗口。</li></ul><p>参数<code>callback</code>定义执行注入后的回调函数。如果插入的类型是<code>code</code>，<code>callback</code>函数将会被传递进一个参数（这个参数是一个<code>Array</code>类型），这是代码执行的返回值。对于多行代码，仅包含最后一行代码的返回值。</p><p>这个方法一般都应该在文档加载完成后被执行，例如下列代码，当文档加载完成后把一个JavaScript文件注入到当前加载的页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="built_in">window</span>.open(<span class="string">'http://zwlme.com'</span>, <span class="string">'_blank'</span>, <span class="string">'location=yes'</span>);</span><br><span class="line">ref.addEventListener(<span class="string">'loadstop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ref.executeScript(&#123;<span class="attr">file</span>: <span class="string">"myscript.js"</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="CSS样式注入"><a href="#CSS样式注入" class="headerlink" title="CSS样式注入"></a>CSS样式注入</h2><p><code>insertCSS()</code>方法可以将一个CSS样式注入<code>InAppBrowser</code>窗口，语法格式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref.insertCSS(details, callback);</span><br></pre></td></tr></table></figure><p>参数<code>ref</code>是返回的<code>InAppBrowser</code>实例，参数<code>details</code>定义要注入的CSS样式代码详细信息，该参数是一个<code>Object</code>，可以定义两个属性，属性要么是<code>file</code>，要么是<code>code</code>。</p><ul><li><strong>file</strong>: 指定一个CSS样式文件地址，这个文件中的代码将会注入到当前<code>InAppBrowser</code>窗口。</li><li><strong>code</strong>: 指定一个CSS样式代码字符串，这段代码将会注入到当前<code>InAppBrowser</code>窗口。</li></ul><p>参数<code>callback</code>定义执行注入后的回调函数。</p><p>这个方法一般都应该在文档加载完成后被执行，例如下列代码，当文档加载完成后把一个CSS样式文件注入到当前加载的页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="built_in">window</span>.open(<span class="string">'http://zwlme.com'</span>, <span class="string">'_blank'</span>, <span class="string">'location=yes'</span>);</span><br><span class="line">ref.addEventListener(<span class="string">'loadstop'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ref.insertCSS(&#123;<span class="attr">file</span>: <span class="string">"mystyles.css"</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><blockquote><p>相关文章:</p><p><a href="/frontend/phonegap-getting-started-tutorial-1.html">PhoneGap入门教程(1) - 环境安装与配置</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-2.html">PhoneGap入门教程(2) - 内核事件和基本用法</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-3.html">PhoneGap入门教程(3) - 原生插件安装和管理</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-4.html">PhoneGap入门教程(4) - 电量变化侦测</a></p><p>PhoneGap入门教程(5) - 程序内置浏览器窗口</p><p><a href="/frontend/phonegap-getting-started-tutorial-6.html">PhoneGap入门教程(6) - 设备信息和系统提示</a></p></blockquote><br><blockquote><p>参考资料：</p><p><a href="http://cordova.apache.org/docs/en/3.3.0/cordova_inappbrowser_inappbrowser.md.html" target="_blank" rel="noopener">Apache Cordova Documentation - InAppBrowser</a></p></blockquote><p>[img1]: /img/post/PhoneGap-3/1.png<br>[img2]: /img/post/PhoneGap-3/2.png<br>[img3]: /img/post/PhoneGap-3/3.png</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用&lt;code&gt;window.open()&lt;/code&gt;方法可以让用户在应用程序内显示一个浏览器窗口，但是PhoneGap重写了这个方法。该方法与BOM（浏览器对象模型）的&lt;code&gt;window.open()&lt;/code&gt;方法有很大的不同，其中一个最大的不同是该方法返回了一个&lt;code&gt;InAppBrowser&lt;/code&gt;对象，用于引用这个新打开的窗口，从而可以在应用程序内控制这个窗口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="PhoneGap" scheme="https://www.zhuowenli.com/tags/PhoneGap/"/>
    
      <category term="Android" scheme="https://www.zhuowenli.com/tags/Android/"/>
    
      <category term="Webapp" scheme="https://www.zhuowenli.com/tags/Webapp/"/>
    
  </entry>
  
  <entry>
    <title>PhoneGap入门教程(4) - 电量变化侦测</title>
    <link href="https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-4.html"/>
    <id>https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-4.html</id>
    <published>2015-02-03T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>电量侦测插件提供了一系列事件，通过事件对象来返回电量使用情况。</p><a id="more"></a><p>电量状态的变化会触发下列几个事件：</p><ul><li>batterycritical 当程序侦测到电量降低到临界点时，触发该事件</li><li>batterystatus   当程序侦测到电量至少发生1%的改变时，触发该事件</li><li>batterylow      当程序侦测到电量降低到一个较低水平值时，触发该事件</li></ul><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>电量侦测插件的完全限定名是<code>org.apache.cordova.battery-status</code>，可以使用下面的命令安装插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add org.apache.cordova.battery-status</span><br></pre></td></tr></table></figure><h3 id="batterystatus事件"><a href="#batterystatus事件" class="headerlink" title="batterystatus事件"></a>batterystatus事件</h3><p>当程序侦测到电量至少发生1%的改变时，触发该事件。另外，当设备连接或断开电源也会触发该事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"batterystatus"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>事件处理程序包含一个参数，该参数是一个对象，该对象包含以下两个属性：</p><ul><li><p>level: 获取电池电量的百分比(值范围是0-100). (Number)</p></li><li><p>isPlugged: 表示是否连接电源. (Boolean)</p></li></ul><p>例如下面的代码，用于监控电源状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"batterystatus"</span>, onBatteryStatus, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBatteryStatus</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"电池电量: "</span> + info.level + <span class="string">" 是否充电: "</span> + info.isPlugged);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="batterycritical事件"><a href="#batterycritical事件" class="headerlink" title="batterycritical事件"></a>batterycritical事件</h3><p>当程序侦测到电量降低到临界点时，触发该事件。临界点的值由设备指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"batterycritical"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>事件处理程序包含一个参数，该参数是一个对象，该对象包含以下两个属性：</p><ul><li><p>level: 获取电池电量的百分比(值范围是0-100). (Number)</p></li><li><p>isPlugged: 表示是否连接电源. (Boolean)</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"batterycritical"</span>, onBatteryCritical, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBatteryCritical</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"电池电量过低，仅剩 "</span> + info.level + <span class="string">"%\n快去充电吧!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="batterylow事件"><a href="#batterylow事件" class="headerlink" title="batterylow事件"></a>batterylow事件</h3><p>当程序侦测到电量降低到一个较低水平值时，触发该事件。水平值由设备指定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"batterylow"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>事件处理程序包含一个参数，该参数是一个对象，该对象包含以下两个属性：</p><ul><li><p>level: 获取电池电量的百分比(值范围是0-100). (Number)</p></li><li><p>isPlugged: 表示是否连接电源. (Boolean)</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"batterylow"</span>, onBatteryLow, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBatteryLow</span>(<span class="params">info</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"电池电量过低，仅剩 "</span> + info.level + <span class="string">"%"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>相关文章:</p><p><a href="/frontend/phonegap-getting-started-tutorial-1.html">PhoneGap入门教程(1) - 环境安装与配置</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-2.html">PhoneGap入门教程(2) - 内核事件和基本用法</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-3.html">PhoneGap入门教程(3) - 原生插件安装和管理</a></p><p>PhoneGap入门教程(4) - 电量变化侦测</p><p><a href="/frontend/phonegap-getting-started-tutorial-5.html">PhoneGap入门教程(5) - 程序内置浏览器窗口</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-6.html">PhoneGap入门教程(6) - 设备信息和系统提示</a></p></blockquote><br><blockquote><p>参考资料：</p><p><a href="https://github.com/apache/cordova-plugin-battery-status/blob/master/doc/index.md" target="_blank" rel="noopener">org.apache.cordova.battery-status</a></p></blockquote><p>[img1]: /img/post/PhoneGap-3/1.png<br>[img2]: /img/post/PhoneGap-3/2.png<br>[img3]: /img/post/PhoneGap-3/3.png</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;电量侦测插件提供了一系列事件，通过事件对象来返回电量使用情况。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="PhoneGap" scheme="https://www.zhuowenli.com/tags/PhoneGap/"/>
    
      <category term="Android" scheme="https://www.zhuowenli.com/tags/Android/"/>
    
      <category term="Webapp" scheme="https://www.zhuowenli.com/tags/Webapp/"/>
    
  </entry>
  
  <entry>
    <title>PhoneGap入门教程(3) - 原生插件安装和管理</title>
    <link href="https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-3.html"/>
    <id>https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-3.html</id>
    <published>2015-02-03T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>PhoneGap需要通过插件来实现访问设备本地API的功能，PhoneGap1.x 和 PhoneGap2.x 都内置了许多插件。 但是实践表明，并不是所有的应用程序都会用到这么多的插件，所以PhoneGap3.x将插件独立出来，有需要才安装。</p><a id="more"></a><h2 id="安装和管理插件"><a href="#安装和管理插件" class="headerlink" title="安装和管理插件"></a>安装和管理插件</h2><p>一旦需要某个插件，可以用<code>phonegap plugin add</code>命令将这个插件添加到工程中，语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phonegap plugin add 插件完全限定名</span><br></pre></td></tr></table></figure><p>例如，“设备基本信息”插件的完全限定名是<code>org.apache.cordova.device</code>，那么就可以使用下列命名添加（注意先<code>cd</code>到工程目录）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phonegap plugin add org.apache.cordova.device</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/02/03/1.png" alt=""></p><h3 id="查看开发环境中安装的插件"><a href="#查看开发环境中安装的插件" class="headerlink" title="查看开发环境中安装的插件"></a>查看开发环境中安装的插件</h3><p>现在，在Eclipse中刷新工程，就可以在src目录下看到新增的插件类Device.java。并且在 www\plugins\ 目录下新增了目录：org.apache.cordova.device\www。在其下还有一个名为 device.js 的文件，这个文件包含了用于调用该插件API的JavaScript文件。</p><p><img src="https://st-qn.gittt.cn/2015/02/03/2.png" alt=""></p><p>并且，在res/xml/config.xml 配置文件中会添加对插件的引用，<code>feature</code>节点表明这是一个插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">feature</span> <span class="attr">name</span>=<span class="string">"Device"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"android-package"</span> <span class="attr">value</span>=<span class="string">"org.apache.cordova.device.Device"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">feature</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且，在www目录下的 cordova_plugins.js 文件中，也可以看到被改变的JavaScript代码，这些代码用于注册新的插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cordova.define(<span class="string">'cordova/plugin_list'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"file"</span>: <span class="string">"plugins/org.apache.cordova.device/www/device.js"</span>,</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"org.apache.cordova.device.device"</span>,</span><br><span class="line">        <span class="string">"clobbers"</span>: [</span><br><span class="line">            <span class="string">"device"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">module</span>.exports.metadata =</span><br><span class="line"><span class="comment">// TOP OF METADATA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"org.apache.cordova.device"</span>: <span class="string">"0.2.13"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// BOTTOM OF METADATA</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意，在Android上使用某些插件的功能就必须添加授权，例如震动功能等。如果使用了<code>phonegap plugin add</code>命令来安装震动功能插件，右击AndroidManifest.xml 并选择 Open With &gt; Text Editer 打开该文件，就可以看到<code>uses-sdk</code>元素和<code>application</code>元素之间的权限设置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 允许程序访问震动设备 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.premission.VIBRATE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查看和删除插件"><a href="#查看和删除插件" class="headerlink" title="查看和删除插件"></a>查看和删除插件</h3><p>如果想删除已经安装的插件，可以用<code>phonegap plugin remove</code>命令将这个插件从工程中删除，语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phonegap plugin remove 插件完全限定名</span><br></pre></td></tr></table></figure><p>在删除之前，可以使用如下命令查看已经安装的插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phonegap plugin list</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/02/03/3.png" alt=""></p><h3 id="PhoneGap3-x原生插件功能目录"><a href="#PhoneGap3-x原生插件功能目录" class="headerlink" title="PhoneGap3.x原生插件功能目录"></a>PhoneGap3.x原生插件功能目录</h3><p>PhoneGap3.x 官方有很多插件可以使用，下列是这些插件的列表极其功能的简单说明（<strong>加粗</strong>为热门插件）</p><ul><li><p><strong><code>org.apache.cordova.device</code></strong>   设备基本信息</p></li><li><p><strong><code>org.apache.cordova.network-information</code></strong>   网络连接事件</p></li><li><p><code>org.apache.cordova.battery-status</code>   电量侦测事件</p></li><li><p><code>org.apache.cordova.device-motion</code>   重力加速计</p></li><li><p><code>org.apache.cordova.device-orientation</code>   罗盘（指南针）</p></li><li><p><strong><code>org.apache.cordova.geolocation</code></strong>   地理定位</p></li><li><p><strong><code>org.apache.cordova.camera</code></strong>   照相机</p></li><li><p><code>org.apache.cordova.media-capture</code>   捕获照片、视频</p></li><li><p><code>org.apache.cordova.media</code>   媒体播放</p></li><li><p><strong><code>org.apache.cordova.file</code></strong>   文件系统管理</p></li><li><p><code>org.apache.cordova.file-transfer</code>   文件传输</p></li><li><p><strong><code>org.apache.cordova.dialogs</code></strong>   对话框</p></li><li><p><code>org.apache.cordova.vibration</code>   振动</p></li><li><p><code>org.apache.cordova.contacts</code>   联系人管理</p></li><li><p><code>org.apache.cordova.globalization</code>   全球化</p></li><li><p><strong><code>org.apache.cordova.splashscreen</code></strong>   启动屏幕</p></li><li><p><strong><code>org.apache.cordova.inappbrowser</code></strong>   内置浏览器窗口</p></li><li><p><strong><code>org.apache.cordova.console</code></strong>   调试主控台</p></li></ul><p>同时，可以从下面的网址查询PhoneGap3.x适用的第三方插件，这些第三方插件也可以用<code>phonegap plugin</code>命令进行管理。</p><p><a href="http://plugins.cordova.io/" target="_blank" rel="noopener">http://plugins.cordova.io/</a></p><hr><blockquote><p>相关文章:</p><p><a href="/frontend/phonegap-getting-started-tutorial-1.html">PhoneGap入门教程(1) - 环境安装与配置</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-2.html">PhoneGap入门教程(2) - 内核事件和基本用法</a></p><p>PhoneGap入门教程(3) - 原生插件安装和管理</p><p><a href="/frontend/phonegap-getting-started-tutorial-4.html">PhoneGap入门教程(4) - 电量变化侦测</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-5.html">PhoneGap入门教程(5) - 程序内置浏览器窗口</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-6.html">PhoneGap入门教程(6) - 设备信息和系统提示</a></p></blockquote><br><blockquote><p>参考资料：</p><p><a href="http://plugins.cordova.io/" target="_blank" rel="noopener">Cordova Plugin Registry</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PhoneGap需要通过插件来实现访问设备本地API的功能，PhoneGap1.x 和 PhoneGap2.x 都内置了许多插件。 但是实践表明，并不是所有的应用程序都会用到这么多的插件，所以PhoneGap3.x将插件独立出来，有需要才安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="PhoneGap" scheme="https://www.zhuowenli.com/tags/PhoneGap/"/>
    
      <category term="Android" scheme="https://www.zhuowenli.com/tags/Android/"/>
    
      <category term="Webapp" scheme="https://www.zhuowenli.com/tags/Webapp/"/>
    
  </entry>
  
  <entry>
    <title>PhoneGap入门教程(2) - 内核事件和基本用法</title>
    <link href="https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-2.html"/>
    <id>https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-2.html</id>
    <published>2015-02-02T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>PhoneGap的大量操作都是通过响应事件来完成，在PhoneGap的整个生命周期内有很多内建的事件。</p><p>通过事件处理，可以获取设备的信息，并根据这些信息来实现一个应用程序。</p><a id="more"></a><h2 id="PhoneGap基本开发"><a href="#PhoneGap基本开发" class="headerlink" title="PhoneGap基本开发"></a>PhoneGap基本开发</h2><p>一旦创建了工程，PhoneGap的开发就变得非常简单，只需要编写 www 目录下的index.html文件就可以进行开发了。对于Android工程，这个目录的位置在F:\kypapp\platforms\android\assets\www下。</p><p>在开发的过程中，需要引用的相关资源，例如图片、CSS样式文件、JS文件等，这些文件也必须放在www目录及其子目录底下才正被正常调用。</p><p>打开index.html，你会发现这是一个标准的html5文档。不同的是必须引用cordova.js这个文件，这是网页与设备实现交互功能的关键。</p><p>phonegap.js同cordova.js是一致的，可以引用任意一个。还有cordova_plugins.js文件也是必须引用的，这个是很重要的文件，用于定义插件列表。</p><p>其他不需要的资源就可以删掉了。</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>PhoneGap的整个生命周期可能产生下面所列的事件，这些事件默认是内置的，无需安装插件。</p><ul><li>deviceready：PhoneGap在完全载入时，将触发该事件</li><li>pause：      当应用程序放在后台运行时，将触发该事件</li><li>resume：     当应用程序从后台恢复到前台时，将触发该事件。</li><li>backbutton： 在使用者按後退按钮时，将触发该事件。</li><li>menubutton： 在使用者按功能表按钮时，将触发该事件。</li><li>searchbutton：當使用者按 Android 上的搜尋按钮时，将触发该事件。</li><li>startcallbutton： 當使用者按下開始呼叫按钮时，将触发该事件。</li><li>endcallbutton：   當使用者按下結束通話按钮时，将触发该事件。</li><li>volumedownbutton：当按下volume down调低音量按钮时触发事件</li><li>volumeupbutton：  当按下volume up调高音量按钮时触发事件</li></ul><p>但是，并不是所有的设备都支持这些事件，有一些可能是设备不支持，或者有的手机没有搜索、通话等按钮。</p><h3 id="内核事件"><a href="#内核事件" class="headerlink" title="内核事件"></a>内核事件</h3><p>内核事件是设备运行时产生的包括<code>deviceready</code>、<code>pause</code>、<code>resume</code>事件。</p><h4 id="deviceready事件"><a href="#deviceready事件" class="headerlink" title="deviceready事件"></a>deviceready事件</h4><p>只有当PhoneGap被完全加载才会触发该事件，对于任何一个PhoneGap应用程序来说，这个事件都十分重要，是一定会使用的。</p><p>为了安全起见，应该在DOM加载完毕后使用<code>document.addEventListener</code>附加<code>deviceready</code>事件监听器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>, onDeviceReady, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Now safe to use device APIs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cordova.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">         <span class="comment">// 当DOM加载完毕，注册deviceready事件监听</span></span></span><br><span class="line"><span class="actionscript">         <span class="function"><span class="keyword">function</span> <span class="title">onLoad</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>, onDeviceReady, <span class="literal">false</span>);</span></span><br><span class="line">         &#125;</span><br><span class="line"><span class="actionscript">         <span class="comment">// 注册事件监听</span></span></span><br><span class="line"><span class="actionscript">         <span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//...</span></span></span><br><span class="line">         &#125;</span><br><span class="line">         onLoad();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="pause和resume事件"><a href="#pause和resume事件" class="headerlink" title="pause和resume事件"></a>pause和resume事件</h4><p>当程序被放到后台的时候执行pause事件，当程序从后台恢复到前台执行的时候将触发resume事件。</p><p>注册相应的监听，可以用于处理相应的事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 当DOM加载完毕，注册deviceready事件监听</span></span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">"deviceready"</span>, onDeviceReady, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDeviceReady</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="comment">// 注册事件监听</span></span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">"pause"</span>, onPause, <span class="literal">false</span>);</span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">"resume"</span>, onResume, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理pause事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onPause</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"-------------------pause-------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理resume事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResume</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"-------------------resume-------------------"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侦听设备按键"><a href="#侦听设备按键" class="headerlink" title="侦听设备按键"></a>侦听设备按键</h3><p>一些设备带有功能键，如标准安卓设备就带有菜单键、返回键、搜索键等。在安卓4.0后可以取消上下左右、通话、搜索等按键。PhoneGap应用程序可以检测这些按键是否被点击，通过事件处理程序就可以自定义对这些操作的响应。</p><h4 id="backbutton事件"><a href="#backbutton事件" class="headerlink" title="backbutton事件"></a>backbutton事件</h4><p>当用户点击后退按键时触发该事件，注意不是所有设备都提供了返回按键，因此一些设备不支持该事件。</p><p>当点击后退按钮时，系统一般会有一个默认的响应行为。如果想重写该行为，可以通过注册一个事件监听器来监听该行为。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"backbutton"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>如果注册了该事件，默认的行为将会被取消掉。例如在Android系统上，点击后退按钮可以把程序放到后台，但是注册该事件后此默认行为将会被取消掉。</p><p>iOS没有后退键，所以不支持该程序。</p><h4 id="menubutton事件"><a href="#menubutton事件" class="headerlink" title="menubutton事件"></a>menubutton事件</h4><p>当用户点击菜单按键时触发该事件，注意不是所有设备都提供了返回按键，因此一些设备不支持该事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"menubutton"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>iOS没有菜单键，所以不支持该程序。</p><h4 id="searchbutton事件"><a href="#searchbutton事件" class="headerlink" title="searchbutton事件"></a>searchbutton事件</h4><p>当用户点击搜索按键时触发该事件，注意不是所有设备都提供了返回按键，因此一些设备不支持该事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"searchbutton"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>iOS没有搜索键，所以不支持该程序。</p><h4 id="startcallbutton事件"><a href="#startcallbutton事件" class="headerlink" title="startcallbutton事件"></a>startcallbutton事件</h4><p>当用户点击通话按键时触发该事件，注意不是所有设备都提供了返回按键，因此一些设备不支持该事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"startcallbutton"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>注意，该事件仅适用于BlackBerry(OS10.0+)，Android和iOS不支持该事件。</p><h4 id="endcallbutton事件"><a href="#endcallbutton事件" class="headerlink" title="endcallbutton事件"></a>endcallbutton事件</h4><p>当用户点击挂机按键（即通话结束键）时触发该事件，注意不是所有设备都提供了返回按键，因此一些设备不支持该事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"endcallbutton"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>注意，该事件仅适用于BlackBerry(OS10.0+)，Android和iOS不支持该事件。</p><h4 id="volumeupbutton事件"><a href="#volumeupbutton事件" class="headerlink" title="volumeupbutton事件"></a>volumeupbutton事件</h4><p>当用户点击调高音量按键时触发该事件，注意不是所有设备都提供了返回按键，因此一些设备不支持该事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"volumeupbutton"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>注意，该事件仅适用于BlackBerry(OS10.0+)，Android和iOS不支持该事件。</p><h4 id="volumedownbutton事件"><a href="#volumedownbutton事件" class="headerlink" title="volumedownbutton事件"></a>volumedownbutton事件</h4><p>当用户点击调低音量按键时触发该事件，注意不是所有设备都提供了返回按键，因此一些设备不支持该事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"volumedownbutton"</span>, yourCallbackFunction, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>注意，该事件仅适用于BlackBerry(OS10.0+)，Android和iOS不支持该事件。</p><hr><blockquote><p>相关文章:</p><p><a href="/frontend/phonegap-getting-started-tutorial-1.html">PhoneGap入门教程(1) - 环境安装与配置</a></p><p>PhoneGap入门教程(2) - 内核事件和基本用法</p><p><a href="/frontend/phonegap-getting-started-tutorial-3.html">PhoneGap入门教程(3) - 原生插件安装和管理</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-4.html">PhoneGap入门教程(4) - 电量变化侦测</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-5.html">PhoneGap入门教程(5) - 程序内置浏览器窗口</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-6.html">PhoneGap入门教程(6) - 设备信息和系统提示</a></p></blockquote><br><blockquote><p>参考资料：</p><p><a href="http://cordova.apache.org/docs/zh/3.1.0/cordova_events_events.md.html#deviceready" target="_blank" rel="noopener">Apache Cordova Documentation</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PhoneGap的大量操作都是通过响应事件来完成，在PhoneGap的整个生命周期内有很多内建的事件。&lt;/p&gt;
&lt;p&gt;通过事件处理，可以获取设备的信息，并根据这些信息来实现一个应用程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="PhoneGap" scheme="https://www.zhuowenli.com/tags/PhoneGap/"/>
    
      <category term="Android" scheme="https://www.zhuowenli.com/tags/Android/"/>
    
      <category term="Webapp" scheme="https://www.zhuowenli.com/tags/Webapp/"/>
    
  </entry>
  
  <entry>
    <title>PhoneGap入门教程(1) - 环境搭建与配置</title>
    <link href="https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-1.html"/>
    <id>https://www.zhuowenli.com/frontend/phonegap-getting-started-tutorial-1.html</id>
    <published>2015-01-31T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>PhoneGap是一能够让你用普通的web技术编写出能够轻松调用API接口和进入应用商店的HTML5应用开发平台。</p><p>是唯一的一个支持7个平台的开源移动框架。它的优势是无以伦比的：开发成本低——据估算，至多Native App的五分之一！</p><p>PhoneGap就是一种中间件技术，可以通过搭建一个webview来执行网页程序，并且可以提供调用底层API的接口。本教程将会介绍如何在windows下开发android应用。IOS版本有时间另外讲。</p><a id="more"></a><h2 id="PhoneGap安装与配置"><a href="#PhoneGap安装与配置" class="headerlink" title="PhoneGap安装与配置"></a>PhoneGap安装与配置</h2><h3 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h3><p>我们将使用NodeJS来管理开发。我们可以从下面的网址下载NodeJS。</p><p><a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a></p><p>如图，NodeJS会判断操作系统，不同系统INSTALL按钮指向的链接也不同。</p><p><img src="https://st-qn.gittt.cn/2015/01/31/1.png" alt=""></p><h3 id="安装PhoneGap"><a href="#安装PhoneGap" class="headerlink" title="安装PhoneGap"></a>安装PhoneGap</h3><p>Android开发是在windows上进行的，所以下载windows版的NodeJS。安装好NodeJS之后，其中会包含了npm这个管理器。</p><p>从windows开始菜单选择“Node.js command prompt”应用，并执行。会打开一个命令行工具，这将自动设置npm管理器环境。</p><p><img src="https://st-qn.gittt.cn/2015/01/31/2.png" alt=""></p><p>下面我们使用命令行来进行安装。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install phonegap</span><br></pre></td></tr></table></figure><p>回车执行后会自动下载最新版本的PhoneGap，过段时间即可安装完成。安装完成后，可在下面的位置看到phonegap文件夹，说明下载安装完成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\用户名\AppData\Roaming\npm\node_modules\</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/01/31/3.png" alt=""></p><h2 id="建立PhoneGap-for-Android开发和测试环境"><a href="#建立PhoneGap-for-Android开发和测试环境" class="headerlink" title="建立PhoneGap for Android开发和测试环境"></a>建立PhoneGap for Android开发和测试环境</h2><p>要为Android开发原生应用程序，一般会使用Eclipce这个IDE，并且在上面安装专门用于android开发的插件：ADT。</p><p>无论任何环境进行android应用程序开发都需要Android SDK 支持才行。</p><p>当然，Google已经封装了一个包含Eclipce、ADT、Android SDK的集成开发包提供下载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://developer.android.com/sdk</span><br></pre></td></tr></table></figure><h3 id="安装ANT和配置环境"><a href="#安装ANT和配置环境" class="headerlink" title="安装ANT和配置环境"></a>安装ANT和配置环境</h3><p>PhoneGap需要Apache Ant来编译工程，因此需要装Apache Ant，可以从下面的网址下载：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ant.apache.org/bindownload.cgi</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/01/31/4.png" alt=""></p><p>下载的ANT仅仅是个压缩包，只需解压到一个目录就行。我将之解压到(D:\Application\Android\ant)目录下，然后还要配置环境变量<code>ANT_HOME</code>指向这个文件位置。</p><p>为了在命令行中方便使用ant命令，我们可以将ant的bin路径添加到PATH变量中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;%ANT_HOME%\bin</span><br></pre></td></tr></table></figure><p>这里的<code>%ANT_HOME%</code>实际上是使用前面定义的<code>ANT_HOME</code>环境变量。</p><p><img src="https://st-qn.gittt.cn/2015/01/31/5.png" alt=""></p><p><img src="https://st-qn.gittt.cn/2015/01/31/6.png" alt=""></p><h3 id="配置Android环境"><a href="#配置Android环境" class="headerlink" title="配置Android环境"></a>配置Android环境</h3><p>此外，还要配置Android环境变量。添加<code>ANDROID_HOME</code>环境变量，指向SDK目录(D:\Application\Android\sdk)，然后添加到PATH中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools</span><br></pre></td></tr></table></figure><p>这些同Android开发一样，这里就不再赘述了。</p><h2 id="创建PhoneGap工程"><a href="#创建PhoneGap工程" class="headerlink" title="创建PhoneGap工程"></a>创建PhoneGap工程</h2><p>下面我们使用PhoneGap来创建一个工程。使用管理员身份打开一个命令行窗口(cmd)，使用<code>cd</code>命令进入一个目录，将会在该目录创建工程。</p><p>使用PhoneGap create命令创建工程，命令如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phonegap create <span class="tag">&lt;<span class="name">工程路径</span>&gt;</span> <span class="tag">&lt;<span class="name">包名</span>&gt;</span> <span class="tag">&lt;<span class="name">工程名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phonegap create kypapp "zhuowenli.kyp.com" "HelloWorld"</span><br></pre></td></tr></table></figure><p>第一次参数对应的是创建的工程的目录(kypapp)，第二个参数是包名，第三个参数是程序名称，也就是安装打包后在手机上显示的名称。</p><p><img src="https://st-qn.gittt.cn/2015/01/31/7.png" alt=""></p><p>执行后就会在F:\kypapp目录下创建PhoneGap工程，如图：</p><p><img src="https://st-qn.gittt.cn/2015/01/31/8.png" alt=""></p><h3 id="为PhoneGap工程添加Android平台"><a href="#为PhoneGap工程添加Android平台" class="headerlink" title="为PhoneGap工程添加Android平台"></a>为PhoneGap工程添加Android平台</h3><p>PhoneGap工程创建完成后还不知道要在哪种平台上开发和部署程序，可选的平台有很多，如Android，IOS，WP8，blackberry10等等。如果你要添加哪个平台，就必须事先添加这个平台的SDK。我们现在来创建Android平台。</p><p>首先cd进入PhoneGap工程目录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd kypapp</span><br></pre></td></tr></table></figure><p>然后调用下面命令添加Android平台。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phonegap build android</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/01/31/9.png" alt=""></p><p>并且在F:\kypapp\platforms目录下，将可以看到配置好的Android文件夹。</p><p><img src="https://st-qn.gittt.cn/2015/01/31/10.png" alt=""></p><h2 id="使用ADT进行PhoneGap开发"><a href="#使用ADT进行PhoneGap开发" class="headerlink" title="使用ADT进行PhoneGap开发"></a>使用ADT进行PhoneGap开发</h2><p>启动Eclipse。</p><p><img src="https://st-qn.gittt.cn/2015/01/31/11.png" alt=""></p><p>初次启动需要指定Android SDK的目录。单机“Browser…”按钮导航到D:\Application\Android\sdk目录。</p><p><img src="https://st-qn.gittt.cn/2015/01/31/12.png" alt=""></p><p>点击OK后就可以进入开发环境了。</p><ul><li><strong>步骤1</strong>  在主菜单上选择“File &gt; New &gt; Project”菜单栏，打开就能看到Android相关工程<br><img src="https://st-qn.gittt.cn/2015/01/31/13.png" alt=""></li><li><strong>步骤2</strong>  选择“Android Project from Existing Code”目录，点击Next<br><img src="https://st-qn.gittt.cn/2015/01/31/14.png" alt=""></li><li><strong>步骤3</strong>  点击“Browser…”按钮，导航到F:\kypapp\platforms\android目录（刚刚用PhoneGap添加的Android平台目录），将会在下面创建两个工程。<br><img src="https://st-qn.gittt.cn/2015/01/31/15.png" alt=""></li><li><strong>步骤4</strong>  右击HelloWorld主目录，选择“Properties &gt; Resource Filters”,删除“Exclude all:”下面的两条信息（选中，点击右侧Remove），然后点击OK。<br><img src="https://st-qn.gittt.cn/2015/01/31/16.png" alt=""><br>会发现assets底下多了个www文件夹啦。然后res下面的www文件夹可以删掉了。如图：<br><img src="https://st-qn.gittt.cn/2015/01/31/17.png" alt=""></li></ul><p>接下来在包浏览器中，打开“src &gt; zhuowenli.kyp.com &gt; CordovaApp.java”，这是主Java文件。<br>删除或注释掉下面一行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadUrl(launchUrl);</span><br></pre></td></tr></table></figure><p>替换为下面这行代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super.loadUrl("file:///android_asset/www/index.html");</span><br></pre></td></tr></table></figure><p><img src="https://st-qn.gittt.cn/2015/01/31/18.png" alt=""></p><p>ok, 配置成功了。 接下来可以在菜单栏点击“Run As &gt; Android Application”，就可以在AVD或者手机设备打包apk，并安装了。</p><hr><blockquote><p>相关文章:</p><p>PhoneGap入门教程(1) - 环境安装与配置</p><p><a href="/frontend/phonegap-getting-started-tutorial-2.html">PhoneGap入门教程(2) - 内核事件和基本用法</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-3.html">PhoneGap入门教程(3) - 原生插件安装和管理</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-4.html">PhoneGap入门教程(4) - 电量变化侦测</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-5.html">PhoneGap入门教程(5) - 程序内置浏览器窗口</a></p><p><a href="/frontend/phonegap-getting-started-tutorial-6.html">PhoneGap入门教程(6) - 设备信息和系统提示</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PhoneGap是一能够让你用普通的web技术编写出能够轻松调用API接口和进入应用商店的HTML5应用开发平台。&lt;/p&gt;
&lt;p&gt;是唯一的一个支持7个平台的开源移动框架。它的优势是无以伦比的：开发成本低——据估算，至多Native App的五分之一！&lt;/p&gt;
&lt;p&gt;PhoneGap就是一种中间件技术，可以通过搭建一个webview来执行网页程序，并且可以提供调用底层API的接口。本教程将会介绍如何在windows下开发android应用。IOS版本有时间另外讲。&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://www.zhuowenli.com/categories/frontend/"/>
    
    
      <category term="JavaScript" scheme="https://www.zhuowenli.com/tags/JavaScript/"/>
    
      <category term="PhoneGap" scheme="https://www.zhuowenli.com/tags/PhoneGap/"/>
    
      <category term="NodeJS" scheme="https://www.zhuowenli.com/tags/NodeJS/"/>
    
      <category term="Android" scheme="https://www.zhuowenli.com/tags/Android/"/>
    
      <category term="Webapp" scheme="https://www.zhuowenli.com/tags/Webapp/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法说明</title>
    <link href="https://www.zhuowenli.com/diary/markdown.html"/>
    <id>https://www.zhuowenli.com/diary/markdown.html</id>
    <published>2015-01-27T00:00:00.000Z</published>
    <updated>2022-06-18T02:56:11.596Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 语法说明</p><p>================</p><ul><li><a href="#overview">概述</a><ul><li><a href="#philosophy">宗旨</a></li><li><a href="#html">兼容 HTML</a></li><li><a href="#autoescape">特殊字符自动转换</a></li></ul></li><li><a href="#block">区块元素</a><ul><li><a href="#p">段落和换行</a></li><li><a href="#header">标题</a></li><li><a href="#blockquote">区块引用</a></li><li><a href="#list">列表</a></li><li><a href="#precode">代码区块</a></li><li><a href="#hr">分隔线</a></li></ul></li><li><a href="#span">区段元素</a><ul><li><a href="#link">链接</a></li><li><a href="#em">强调</a></li><li><a href="#code">代码</a></li><li><a href="#img">图片</a></li></ul></li><li><a href="#misc">其它</a><ul><li><a href="#backslash">反斜杠</a></li><li><a href="#autolink">自动链接</a></li></ul></li><li><a href="#acknowledgement">感谢</a></li><li><a href="#editor">Markdown 免费编辑器</a></li></ul><hr><h2 id="overview">概述</h2><h3 id="philosophy">宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">1</a>、[atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">2</a>、[Textile] <a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">3</a>、[reStructuredText] <a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">4</a>、[Grutatext] <a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">5</a> 和 [EtText] <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">6</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="html">兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="autoescape">特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="block">区块元素</h2><h3 id="p">段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="header">标题</h3><p>Markdown 支持两种标题的语法，类 [Setext] <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">1</a> 和类 [atx] <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">2</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="blockquote">区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt;&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code>&gt; ## 这是一个标题。&gt;&gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="list">列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>等同于：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>McHale<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Parish<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你的列表标记写成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Magic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Magic<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You&apos;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="precode">代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个普通段落：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>这是一个代码区块。</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here is an example of AppleScript:</span><br><span class="line"></span><br><span class="line">    tell application "Foo"</span><br><span class="line">        beep</span><br><span class="line">    end tell</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is an example of AppleScript:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>tell application "Foo"</span><br><span class="line">    beep</span><br><span class="line">end tell</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2004 Foo Corporation</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>div class="footer"<span class="symbol">&amp;gt;</span></span><br><span class="line">    <span class="symbol">&amp;amp;</span>copy; 2004 Foo Corporation</span><br><span class="line"><span class="symbol">&amp;lt;</span>/div<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="hr">分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="span">区段元素</h2><h3 id="link">链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/"</span> <span class="attr">title</span>=<span class="string">"Title"</span>&gt;</span></span><br><span class="line">an example<span class="tag">&lt;/<span class="name">a</span>&gt;</span> inline link.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.net/"</span>&gt;</span>This link<span class="tag">&lt;/<span class="name">a</span>&gt;</span> has no</span><br><span class="line">title attribute.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;[foo]: http://example.com/  &apos;Optional Title Here&apos;[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用尖括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        &quot;Google&quot;  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        &quot;Google&quot;  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法都会产生下面的 HTML。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I get 10 times more traffic from <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://google.com/"</span></span></span><br><span class="line"><span class="tag"><span class="attr">title</span>=<span class="string">"Google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span> than from</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://search.yahoo.com/"</span> <span class="attr">title</span>=<span class="string">"Yahoo Search"</span>&gt;</span>Yahoo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">or <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://search.msn.com/"</span> <span class="attr">title</span>=<span class="string">"MSN Search"</span>&gt;</span>MSN<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="em">强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>single asterisks<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>single underscores<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>double asterisks<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>double underscores<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="code">代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>`</code>），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Use the <span class="tag">&lt;<span class="name">code</span>&gt;</span>printf()<span class="tag">&lt;/<span class="name">code</span>&gt;</span> function.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>There is a literal backtick (`) here.<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A single backtick in a code span: <span class="tag">&lt;<span class="name">code</span>&gt;</span>`<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A backtick-delimited string in a code span: <span class="tag">&lt;<span class="name">code</span>&gt;</span>`foo`<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在代码区段内，<code>&amp;</code> 和尖括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Please don't use any <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>blink<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> tags.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;amp;</span>#8212;<span class="tag">&lt;/<span class="name">code</span>&gt;</span> is the decimal-encoded equivalent of <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;amp;</span>mdash;<span class="tag">&lt;/<span class="name">code</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="img">图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>  选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p><hr><h2 id="misc">其它</h2><h3 id="autolink">自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/"</span>&gt;</span>http://example.com/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"<span class="symbol">&amp;#x6D;</span><span class="symbol">&amp;#x61;</span>i<span class="symbol">&amp;#x6C;</span><span class="symbol">&amp;#x74;</span><span class="symbol">&amp;#x6F;</span>:<span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x65;</span></span></span></span><br><span class="line"><span class="tag"><span class="string"><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#64;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#120;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#109;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x6C;</span>e<span class="symbol">&amp;#x2E;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#111;</span></span></span></span><br><span class="line"><span class="tag"><span class="string"><span class="symbol">&amp;#109;</span>"</span>&gt;</span><span class="symbol">&amp;#x61;</span><span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x64;</span><span class="symbol">&amp;#x72;</span><span class="symbol">&amp;#x65;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#115;</span><span class="symbol">&amp;#64;</span><span class="symbol">&amp;#101;</span><span class="symbol">&amp;#120;</span><span class="symbol">&amp;#x61;</span></span><br><span class="line"><span class="symbol">&amp;#109;</span><span class="symbol">&amp;#x70;</span><span class="symbol">&amp;#x6C;</span>e<span class="symbol">&amp;#x2E;</span><span class="symbol">&amp;#99;</span><span class="symbol">&amp;#111;</span><span class="symbol">&amp;#109;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「<a href="mailto:address@example.com">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3 id="backslash">反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><hr><h2 id="editor">Markdown 免费编辑器</h2><p>Windows 平台</p><ul><li><a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></li><li><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">MarkPad</a></li></ul><p>Linux 平台</p><ul><li><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="noopener">ReText</a></li></ul><p>Mac 平台</p><ul><li><a href="http://mouapp.com/" target="_blank" rel="noopener">Mou</a></li></ul><p>在线编辑器</p><ul><li><a href="http://markable.in/" target="_blank" rel="noopener">Markable.in</a></li><li><a href="http://dillinger.io/" target="_blank" rel="noopener">Dillinger.io</a></li></ul><p>浏览器插件</p><ul><li><a href="https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog" target="_blank" rel="noopener">MaDe</a> (Chrome)</li></ul><p>高级应用</p><ul><li><a href="http://www.sublimetext.com/2" target="_blank" rel="noopener">Sublime Text 2</a> + <a href="http://ttscoff.github.com/MarkdownEditing/" target="_blank" rel="noopener">MarkdownEditing</a> / <a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="noopener">教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Markdown 语法说明&lt;/p&gt;
&lt;p&gt;================&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;宗旨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#htm
      
    
    </summary>
    
    
      <category term="diary" scheme="https://www.zhuowenli.com/categories/diary/"/>
    
    
      <category term="markdown" scheme="https://www.zhuowenli.com/tags/markdown/"/>
    
  </entry>
  
</feed>
